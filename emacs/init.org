#+title: My Emacs Configuration
#+property: header-args:emacs-lisp :tangle (expand-file-name "init.el" (concat (if (getenv "XDG_CONFIG_HOME") "/.config") "/emacs")) :mkdirp yes

* Setup
** Windows
The best way i found to install emacs on windows is via *scoop* and create a
script on *$USERPATH/Roaming/Microsoft/Windows/Start Menu/Programs/Startup* that
starts the emacs server automatically at the startup.

#+begin_src shell
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
irm get.scoop.sh | iex
scoop update *
scoop buckets add kiennq-scoop
scoop install emacs-k

# Path to startup file
$startup_file = "$([Environment]::GetFolderPath('Startup'))\StartEmacsServer.bat"

# Introduce variable HOME:
# 1. for simplicity
# 2. runemacs.exe expects it to be
#
# %APPDATA% is chosen because runemacs.exe operates there
#	https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init
#	https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables
New-Item $startup_file -type file
Set-Content -Path $startup_file -Value "set HOME=%APPDATA%"

# Clean previous server file info first
Add-Content -Path $startup_file -Value "del /Q ""%HOME%/.emacs.d/server/*"""
Add-Content -Path $startup_file -Value "runemacs.exe --daemon"
#+end_src

* Early init
** Gui widgets
On the early init is useful to disable unnecessary gui components to
avoid drawing them at all. The scroll-bar is still present in newer
frames at this point. To remove it also in them it must be changed the
/default-frame-alist/ but since this variable is reset in the
*geometry and aspect* section this change is applied there.
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") "/.config") "/emacs")) :mkdirp yes
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (unless (display-graphic-p)
    (setq ring-bell-function 'ignore))
#+end_src

* Startup
During startup is useful to increase the garbage collector memory size
because it's originally 1 Mb and this could heavily slow the startup
process and the runtime execution, anyway it should be reset to an
intermediate value or it will freeze after long time use.
Most of those tweaks were made following the Doom emacs strategy of lazy loading
[[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][link]]

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold (* 50 1000 1000) ;; 50 Mb
		    gc-cons-percentage 0.1 )))
#+end_src

When installing a new package there are often lots of warnings due to native
compilation that i cannot do nothing about so i decided to silence them.
#+begin_src emacs-lisp
  (setq comp-async-report-warnings-errors nil)
#+end_src


** profile emacs startup
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs loaded in %s with %d garbage collections."
		       (emacs-init-time) gcs-done)))
#+end_src

* Editor behaviour
** geometry and font
Those are settings relative to:
- transparency: /alpha/
- window size at start: /width/ and /height/
- font: /font/
- avoid the vertical scroll bar on new frames: /vertical-scroll-bar/

#+begin_src emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 100)
  (setq default-frame-alist '((width . 90)
			      (height . 40)
			      (alpha . (100 . 100))))

  ;; (defvar lm/font
  ;;   (cond
  ;;    ((string-equal system-type "gnu/linux") "JetBrains Mono Nerd Font-10")
  ;;    ((string-equal system-type "windows-nt") "JetBrains Mono-10")))
  ;; (setf (alist-get 'font default-frame-alist) lm/font)

  ;; disable scroll-bar even in new frames
  (add-to-list 'default-frame-alist
	       '(vertical-scroll-bars . nil))
#+end_src

** tab width
Set the default width of tab to 2

#+begin_src emacs-lisp
  (setq tab-width 2)
#+end_src

** tab-always-indent
Set the behaviour of tab so that it first try to indent the line, if the line is
already indented then it does the selected action
#+begin_src emacs-lisp
  (setq tab-always-intent 'complete)
#+end_src
** encoding system
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
** process buffer
increase the amount of data that emacs can read from processes; default is 4 kb

#+begin_src emacs-lisp
  (setq read-process-output-max (* 10 1024 1024)) ;; 10 Mb
#+end_src

** autosaving
disable backup of files by default
change the defaults directory where to store ~ , # and .# files, respectively
backup and autosaves and lockfiles.

#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  ;; autosaves files in one common directory
  ;; (setq backup-directory-alist  `(("." . ,(if lm/autosave_dir lm/autosave_dir (concat user-emacs-directory "backups")))))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,lm/autosave_dir t)))
#+end_src

** buffer scrolling
#+begin_src emacs-lisp
  (unless (version< emacs-version "29")
    (pixel-scroll-precision-mode))

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq fast-but-imprecise-scrolling t)
  (setq auto-window-vscroll nil)
  (setq redisplay-dont-pause t)
  (setq scroll-conservatively 10000)
  (setq scroll-step 1)
  (setq scroll-preserve-screen-position t)
  (setq scroll-error-top-bottom t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-inhibit-click-time nil)
  (setq mouse-wheel-follow-mouse 't)
#+end_src

** auto revert mode
automatically refresh the buffer when the correspondig file has been changed
externally

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** automatic pairs mode
automatically insert the pair of some symbols like braces, parenthesis, etc...

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** noises messages
disable:
- the startup screen,
- the prompt for killing buffer
and ask just for (y/n) instead of complete yes and no

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)                              ;; no startup screen
  (setq message-kill-buffer-query nil)                          ;; no prompt kill buffer
  (setq use-short-answers t)
#+end_src

** prefer newer editor files
this is expecially useful for loading the changes to term.el in Windows for
running powershell in term and ansi-term
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

** native compilation
#+begin_src emacs-lisp
  (setq native-compile-always-compile t
	;; package-native-compile t
	)
#+end_src

** row numbers, highlight current line and column 80
#+begin_src emacs-lisp
  (column-number-mode)

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  latex-mode-hook
		  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (custom-set-variables '(fill-column 80)) 
  (global-display-fill-column-indicator-mode)
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

  (if (display-graphic-p)
      (global-hl-line-mode))
#+end_src
** mouse right click
Enable the context menu with the right click of the mouse
#+begin_src emacs-lisp
(context-menu-mode)
#+end_src

** fido
#+begin_src emacs-lisp
  (fido-vertical-mode t)
#+end_src

* Theme
#+begin_src emacs-lisp
  (load-theme 'leuven-dark)
#+end_src
* Repositories
Setup the melpa repository and refresh the contents of package-archives to be
prepared for plugins installation.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

* use-package
/use-package/ is a nice and useful package manager

- the /use-package-always-ensure/ variable means that package not
  already present will be downloaded
- the /use-package-compute-statistics/ enable to profile the startup time of
  installed packages via the *use-package-profile* command.
  
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+end_src

** COMMENT diminish
*diminish* enable to hide minor-mode names from minibuffer.  To hide a
minor-mode put `:diminish` in the use-package configuration of the
mode package
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* My functions
** Wezterm
Often i use wezterm as terminal choise
https://wezfurlong.org/wezterm/installation.html
because emacs, expecially on windows does not provide a good terminal mode. So
i need a way to easily call wezterm and open it in the current directory.

#+begin_src emacs-lisp
  (defun lm/run-wezterm ()
    (interactive)
    (start-process "wezterm" nil "wezterm" "start" "--cwd"
		   default-directory))
#+end_src
* Keybindings
** ways to swap CTRL and CAPS-LOCK
*** Windows

to activate run this script as a .reg file
#+begin_src
REGEDIT4

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,00,3a,00,3a,00,1d,00,00,00,00,00
#+end_src

and run that as a .reg file to deactivate it

#+begin_src 
REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=-
#+end_src

*** Linux
On Linux, using the X Windows Server it just need to run or put it in the init
script.

#+begin_src shell
  setxkbmap -option ctrl:swapcaps
#+end_src

** which-key
Which-key permits to display chords in a window at the bottom of the
application when starting the sequence
#+begin_src emacs-lisp
  (use-package which-key
    :defer 1
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.1)
    (which-key-setup-minibuffer)
    )
#+end_src

** general
general is a package that allow to use a <leader> keys for the chords.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :defer 1
    :config
    (general-override-mode)

    (general-define-key
     :states '(normal insert)
     "C-s" 'save-buffer)

    (general-define-key
     :states '(insert)
     "C-g" 'evil-normal-state)

    (general-define-key
     :states '(normal)
     "H" 'previous-buffer
     "L" 'next-buffer)

    (general-define-key
     :states '(visual)
     "gc" 'comment-dwim)

    (general-create-definer lm/leader-keys
      :states '(normal motion)
      :keymaps 'override
      :prefix "SPC")
    (lm/leader-keys
      "<SPC>" '(execute-extended-command :which-key "M-x")
      "q" '(:ignore t :which-key "Quit")
      "qq" '(save-buffers-kill-terminal :which-key "save all and quit")
      "b" '(:ignore t :which-key "Buffers")
      "bd" '(kill-this-buffer :which-key "kill buffer")
      "bs" '(save-buffer :which-key "save buffer")
      "bl" '(switch-to-buffer :which-key "switch to buffer")
      "bL" '(list-buffers :which-key "list buffers")
      "e" '(dired :which-key "Search")
      "s" '(:ignore t :which-key "Search")
      "ss" '(evil-search-forward :which-key "search forward")
      "sb" '(evil-search-backward :which-key "search backward")
      "sr" '(query-replace :which-key "query replace")
      "a" '(:ignore t :which-key "Appearence")
      "ac" '(customize-themes :which-key "customize themes")
      "at" '(toggle-theme :which-key "toggle theme")
      "am" '(menu-bar-mode :which-key "toggle menu bar")
      "f" '(project-find-file :which-key "find file")
      "v" '(:ignore t :which-key "Scripts")
      "vc" '(lm/run-wezterm :which-key "wezterm here")
      ))
#+end_src

** evil
#+begin_src emacs-lisp
  (use-package evil
    :defer 0.5
    :after general
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode))
  (use-package evil-collection
    :after evil
    :custom (evil-collection-want-unimpaired-p nil)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-normal-state-map (kbd "U") 'undo-redo)
    (evil-collection-init))
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :defer 1
    :hook (dired-mode . dired-hide-details-mode)
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (put 'dired-find-alternate-file 'disabled nil))
#+end_src

* company
#+begin_src emacs-lisp
  (use-package company
    :defer (if (daemonp) nil t)
    :bind (("C-<SPC>" . company-complete))
    :init
    (setq lm/company t)
    (setq company-dabbrev-ignore-case t)
    (setq company-dabbrev-code-ignore-case t)    
    (setq company-keywords-ignore-case t)
    (setq company-idle-delay 0.5)
    :config
    (add-to-list 'company-backends '(company-capf :with company-dabbrev))
    (global-company-mode t))

  (use-package yasnippet
    :after company
    :config
    (yas-minor-mode))


#+end_src
* lsp-mode
i'm trying to use eglot instead of lsp-mode but i keep this configuration code
#+begin_src emacs-lisp
  (defun lm/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (setenv "LSP_USE_PLISTS" "true")
  (setq lsp-use-plists t)
  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    ;; :hook ((lsp-mode . lm/lsp-mode-setup)
    ;; 	 (c++-mode . lsp)
    ;; 	 (python-mode . lsp))
    :init
    (lm/leader-keys
      "l" '(:ignore t :which-key "lsp")
      "ll" '(lsp :which-key "start lsp-mode"))
    ;; (setq lsp-keymap-prefix "C-M-l")

    :config
    (setq lsp-idle-delay 0.500)
    (lsp-enable-which-key-integration t)
    (lm/leader-keys
      "lf" '(lsp-format-buffer :which-key "format buffer")
      "ls" '(lsp-shutdown-workspace :which-key "shutdown workspace")
      "lg" '(:ignore t :which-key "go to")
      "lgd" '(lsp-find-definition :which-key "definition")
      "lgD" '(lsp-find-declaration :which-key "declaration")
      "lgi" '(lsp-find-implementation :which-key "implementation")
      "lgr" '(lsp-find-references :which-key "references")
      "ld" '(:ignore t :which-key "diagnostics")
      "ldl" '(flymake-show-project-diagnostics :which-key "project")
      "ldn" '(flymake-goto-next-error :which-key "next")
      "ldp" '(flymake-goto-prev-error :which-key "previous")
      ))

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-pyright
    :after lsp-mode
    :ensure t
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp-deferred))))
#+end_src
* olivetti
This is a nice package for zen mode editing
#+begin_src emacs-lisp
  (use-package olivetti
    :defer (if (daemonp) nil t)
    :init
    (lm/leader-keys
      "ao" '(olivetti-mode :which-key "olivetti mode")))
#+end_src

* pdf-tools
pdf-tools enable to visualize pdf inside emacs and provides useful features like
midnight mode
on windows it require msys2
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer (if (deamonp) nil t)
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config (add-hook 'pdf-view-mode-hook 'pdf-tools-enable-minor-modes))
#+end_src
* Programming languages
** C/C++
On Windows, when using MSys2-Mingw-64 to compile and clangd as LSP a per project
configuration file named /.clangd/ or a global one named
/~\AppData\Local\clangd\config.yaml/ is required. 
The content of the file must be

#+begin_src dot
  CompileFlags:
  Add: [-target, x86_64-pc-windows-gnu]
#+end_src
*** cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
  :mode ("\\CMakeLists.txt" . cmake-mode))
#+end_src

** Arduino
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ino" .
				  (lambda ()
				    (c-or-c++-mode)
				    (setq lsp-clients-clangd-args
					  `(
					    "-j=2"
					    "--background-index"
					    "--clang-tidy"
					    "--completion-style=detailed"
					    (concat "--query-driver=" (getenv-internal "HOME") "/.platformio/packages/toolchain-atmelavr/bin/avr-g++"))))))
#+end_src


# * Keybindings
** Python
#+begin_src emacs-lisp
  (use-package python-black
    :after python-mode)
  (setq python-indent-offset 2)
#+end_src

** Powershell
#+begin_src emacs-lisp
  (use-package powershell    
    :commands powershell)
#+end_src

** MATLAB
#+begin_src emacs-lisp
  (use-package matlab-mode
    :mode ("\\.m\\'" . matlab-mode))
#+end_src
