#+title: My Emacs Configuration
#+property: header-args:emacs-lisp :tangle (expand-file-name "init.el" (concat (getenv "XDG_CONFIG_HOME") "/emacs")) :mkdirp yes

* Startup-init
** COMMENT Benchmark-init
#+begin_src emacs-lisp
  (if (package-installed-p 'use-package)
      (use-package benchmark-init
	:config
	(add-hook 'after-init-hook 'benchmark-init/deactivate)))
#+end_src
** profile emacs startup
#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs loaded in %s with %d garbage collections."
		       (emacs-init-time) gcs-done)))
#+end_src

** garbage collector
increase the gargbage collector size; default is less then 1 Mb
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000)) ;; 50 Mb
#+end_src  

* Global variables
Those are global variables used in the configuation that can easily change from
a system to an other one. Check the values of those before tangling the org
configuration

#+begin_src emacs-lisp
  (setq lm/dotfiles "/home/leonardo/.dotfiles")
  (setq lm/font (cond
		 ((string-equal system-type "gnu/linux") "FiraCode Nerd Font")
		 ((string-equal system-type "windows-nt") "JetBrains Mono")))
  (defvar lm/default-font-size 90)
  (setq lm/autosave_dir "D:/emacs/autosaves/")
  (setq lm/backup_dir "D:/emacs/backups/")
#+end_src

* Basic configuration
** Gui configuration
*** gui widgets
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (getenv "XDG_CONFIG_HOME") "/emacs"))
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (unless (display-graphic-p)
    (setq ring-bell-function 'ignore))
#+end_src

the scroll-bar is still present in newer frames at this point. To remove it also
in them it must be changed the /default-frame-alist/ but since it is reset in the
*geometry and aspect* section this change is applied there.
*** font style
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font lm/font :height lm/default-font-size)
#+end_src
*** buffer scrolling
#+begin_src emacs-lisp
  (unless (version< emacs-version "29")
    (pixel-scroll-precision-mode))

  (if (string-equal system-type "gnu/linux")
      (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))))

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq fast-but-imprecise-scrolling t)
  (setq auto-window-vscroll nil)
  (setq redisplay-dont-pause t)
  (setq scroll-conservatively 10000)
  (setq scroll-step 1)
  (setq scroll-preserve-screen-position t)
  (setq scroll-error-top-bottom t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-inhibit-click-time nil)
  (setq mouse-wheel-follow-mouse 't)
#+end_src

*** geometry and aspect
Those are settings relative to:
- transparency: /alpha/
- window size at start: /width/ and /height/
- font: /font/
- avoid the vertical scroll bar on new frames: /vertical-scroll-bar/
#+begin_src emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 100))
  (setq default-frame-alist '((width . 90) (height . 40) (alpha . (95 . 100))))
   ;; disable scroll-bar even in new frames
  (add-to-list 'default-frame-alist
	       '(vertical-scroll-bars . nil))
#+end_src

*** theme
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi-tinted t)
#+end_src
*** show row number, highlight current line and column 80
#+begin_src emacs-lisp
  (column-number-mode)

  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (custom-set-variables '(fill-column 80)) 
  (global-display-fill-column-indicator-mode)
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

  (if (display-graphic-p)
      (global-hl-line-mode))
#+end_src

*** max minibuffer size
#+begin_src emacs-lisp
  (setq max-mini-window-height 0.5)
#+end_src

** Editor behaviour
*** tab-always-indent
Set the behaviour of tab so that it first try to indent the line, if the line is
already indented then it does the selected action
#+begin_src emacs-lisp
  (setq tab-always-intent 'complete)
#+end_src
*** coding system
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
*** tab width
Set the default width of tab to 2

#+begin_src emacs-lisp
  (setq tab-width 2)
#+end_src
*** process buffer
increase the amount of data that emacs can read from processes; default is 4 kb

#+begin_src emacs-lisp
  (setq read-process-output-max (* 10 1024 1024)) ;; 10 Mb
#+end_src

*** autosaving
disable backup of files by default
change the defaults directory where to store ~ and # files, respectively
backup and autosaves.

#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  ;; autosaves files in one common directory
  (setq backup-directory-alist  `(("." . ,(if lm/autosave_dir lm/autosave_dir (concat user-emacs-directory "backups")))))
  (setq auto-save-file-name-transforms
	`((".*" ,lm/autosave_dir t)))
#+end_src

*** auto revert mode
automatically refresh the buffer when the correspondig file has been changed
externally

#+begin_src emacs-lisp
     (global-auto-revert-mode t)
#+end_src

*** automatic pairs mode
automatically insert the pair of some symbols like braces, parenthesis, etc...

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

*** noises messages
disable:
- the startup screen,
- the prompt for killing buffer
and ask just for (y/n) instead of complete yes and no

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)                              ;; no startup screen
  (setq message-kill-buffer-query nil)                          ;; no prompt kill buffer
  (setq use-short-answers t)
#+end_src

*** prefer newer editor files
this is expecially useful for loading the changes to term.el in Windows for
running powershell in term and ansi-term
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

*** native compilation
#+begin_src emacs-lisp
    (setq native-compile-always-compile t)
  ;  (setq package-native-compile t)
#+end_src

*** complation-at-point
#+begin_src emacs-lisp
  (require 'dabbrev)
  (defun lm/dabbrev-capf ()
    (dabbrev--reset-global-variables)
    (let* ((abbrev (dabbrev--abbrev-at-point))
	   (candidates (dabbrev--find-all-expansions abbrev t))
	   (bnd (bounds-of-thing-at-point 'symbol)))
      (list (car bnd) (cdr bnd) candidates)))
  (add-hook 'completion-at-point-functions 'lm/dabbrev-capf)
#+end_src

*** fido
#+begin_src emacs-lisp
  (fido-vertical-mode t)
#+end_src

** PowerShell configuration
Set PowerShell as the main console interpreter
To make pwsh run in term and ansi-term you need to edit the /term.el/ file changing
the code around
#+begin_src
 "/bin/sh" "-c"
#+end_src

to

#+begin_src
 "pwsh"
#+end_src

Then the /load-prefer-newer/ option must be set to enable the recent edited file.

#+begin_src emacs-lisp
  (setq explicit-shell-file-name "pwsh")
  (setq excplicit-powershell.exe-args '("-Command" "-"))
#+end_src

* Plugins
** package
Setup the melpa repository and refresh the contents of package-archives to be
prepared for plugins installation.
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** use-package
/use-package/ is a nice and useful package manager

- the /use-package-always-ensure/ variable means that package not already
  downloaded will be
- the /use-package-compute-statistics/ enable to profile the startup time of
  installed packages via the *use-package-profile* command.
  
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+end_src
** diminish
*diminish* enable to hide minor-mode names from minibuffer.
To hide a minor-mode put
`:diminish` in the use-package configuration of the mode package
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 5
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src

** corfu
#+begin_src emacs-lisp
  (use-package corfu
    :init
    (setq corfu-auto t
	  corfu-quit-no-match 'separator
	  completion-styles '(basic ))
    (global-corfu-mode))

  (unless (display-graphic-p)
    (use-package corfu-terminal
      :init
      (custom-set-faces
       '(corfu-default ((t (:background "black")))))
      (corfu-terminal-mode)))
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (if (version< emacs-version "29")
      (use-package tree-sitter
	:defer 5))

  (use-package tree-sitter-langs
    :after tree-sitter
    :config
    (global-tree-sitter-mode))
#+end_src

** rg
This package enable to grep in files and it is cross-platform.
Requires [[https://github.com/BurntSushi/ripgrep][ripgrep]] to work.

#+begin_src emacs-lisp
  (use-package rg
    :bind ("C-c s" . rg-menu)
    :config
    (rg-enable-default-bindings)
    (setq rg-group-result t)
    (setq rg-ignore-case 'smart)
    (setq rg-show-header nil))
#+end_src
** find-file-in-project
Enable to find files in project. Project can be interpreted with various
packages like projectile or the built-in project.el.
Requires [[https://github.com/sharkdp/fd][fd]] to search in cross-platform coerently.

#+begin_src emacs-lisp
  (use-package find-file-in-project
    :defer 5
    :config
    (setq ffip-use-rust-fd t)
    (setq ffip-prefer-ido-mode t))
#+end_src
** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook
    ((conf-mode
      snippet-mode
      org-mode
      c-mode-common
      python-mode) . yas-minor-mode-on)
    :config
    (global-set-key (kbd "C-c y") 'lm/yasnippet-complete))
  (use-package yasnippet-snippets
    :after yasnippet)
  (use-package yasnippet-classic-snippets
    :after yasnippet)

#+end_src
** pdf-tools
pdf-tools enable to visualize pdf inside emacs and provides useful features like
midnight mode
on windows it require msys2
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer 5
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config (add-hook 'pdf-view-mode-hook 'pdf-tools-enable-minor-modes))
#+end_src
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t)
#+end_src

** COMMENT eglot
#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :init
    ;; (add-hook 'python-mode-hook 'eglot-ensure)
    ;; (add-hook 'c-mode-common-hook 'eglot-ensure)
    ;; (add-hook 'cmake-mode-hook 'eglot-ensure)
  )
#+end_src
** lsp-mode
i'm trying to use eglot instead of lsp-mode but i keep this configuration code
#+begin_src emacs-lisp
  (defun lm/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (setenv "LSP_USE_PLISTS" "true")
  (setq lsp-use-plists t)
  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . lm/lsp-mode-setup)
	   (c++-mode . lsp)
	   (python-mode . lsp))
    :init
    (setq lsp-keymap-prefix "C-M-l")

    :config
    (setq lsp-idle-delay 0.500)
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-pyright
    :after lsp-mode
    :ensure t
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp-deferred))))
#+end_src

** COMMENT powershell
#+begin_src emacs-lisp
  (use-package powershell    
    :commands powershell)
#+end_src

** cmake-mode
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("\\CMakeLists.txt" . cmake-mode))
#+end_src

* Languages
** C/C++
On Windows, when using MSys2-Mingw-64 to compile and clangd as LSP a per project
configuration file named /.clangd/ or a global one named
/~\AppData\Local\clangd\config.yaml/ is required. 
The content of the file must be

#+begin_src dot
CompileFlags:
  Add: [-target, x86_64-pc-windows-gnu]
#+end_src

** Arduino
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ino" .
				  (lambda ()
				    (c-or-c++-mode)
				    (setq lsp-clients-clangd-args
					  `(
					    "-j=2"
					    "--background-index"
					    "--clang-tidy"
					    "--completion-style=detailed"
					    (concat "--query-driver=" (getenv-internal "HOME") "/.platformio/packages/toolchain-atmelavr/bin/avr-g++"))))))
#+end_src


# * Keybindings
** Powershell
** Python
#+begin_src emacs-lisp
  (setq python-indent-offset 2)
#+end_src

* Keybindings
There are two kinds of keybinding i use:
- global ones
- leader map ones
as now the leader ones are commented because i'm trying to understand the way
emacs is meant to be used and configured while the leader combo is more a vim
related way of make keymaps.

** ways to swap CTRL and CAPS-LOCK

*** Windows

to activate run this script as a .reg file
#+begin_src
REGEDIT4

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,00,3a,00,3a,00,1d,00,00,00,00,00
#+end_src

and run that as a .reg file to deactivate it

#+begin_src 
REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=-
#+end_src

*** Linux
On Linux, using the X Windows Server it just need to run or put it in the init
script.

#+begin_src shell
setxkbmap -option ctrl:swapcaps
#+end_src

** global
The folling keybinding are:
- <Escape> does not need to be pressed three times to behave like <C-g> but this
	has the countereffect of closing other windows when pressed; to avoid
	that a workaround is to redefine *buffer-quit-function* inside the
	*keyboard-escape-quit* clojure
- <f2> is like <M-x> (experimental)
- <C-z> undo
- <M-z> redo
- <C-Ã¬> insert the char ~
- <C-'> insert the char 
- <C-.> completion
- <C-x><M-+> global font increase
- <C-x><M--> global font decrease	

#+begin_src emacs-lisp
  ;; this code avoid *keyboard-escape-quit* to close all other windows
  (defadvice keyboard-escape-quit
      (around keyboard-escape-quit-dont-close-windows activate)
    (let ((buffer-quit-function (lambda () ())))
      ad-do-it))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-z") 'undo)
  ;; (global-set-key (kbd "C-.") 'dabbrev-expand)
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "M-z") 'undo-redo)
  (global-set-key (kbd "C-ì") #'(lambda ()
				  (interactive)
				  (insert-char (char-from-name "TILDE"))))
  (global-set-key (kbd "C-'") #'(lambda ()
				  (interactive)
				  (insert-char (char-from-name "GRAVE ACCENT"))))
  (global-set-key (kbd "<f9>") 'lm/run-wezterm)

  (global-set-key (kbd "C-.")
		  (cond ((boundp 'lm/company) 'company-complete)
			(t 'complete-symbol)))

  (global-set-key (kbd "C-x M-+") 'lm/font-increase)
  (global-set-key (kbd "C-x M--") 'lm/font-decrease)

  (defun lm/leader-set-key (key body)
    (let ((leader "S-SPC SPC"))
      (global-set-key (kbd (concat leader " " key)) body)))

  (lm/leader-set-key "l" 'eglot)
  (lm/leader-set-key "f" 'eglot-format-buffer)
  (lm/leader-set-key "gd" 'eglot-find-declaration)
  (lm/leader-set-key "e" 'flymake-show-project-diagnostics)

  (windmove-default-keybindings 'meta)
#+end_src

**  keymaps
#+begin_src emacs-lisp
#+end_src
** COMMENT leader keymap...
*** COMMENT general
#+begin_src emacs-lisp
	(use-package general
		:config
		(general-create-definer lm/leader-keys
			:keymaps 'override
			:prefix "<f3>"))
	
	(lm/leader-keys
		"RET" '(counsel-M-x :which-key "M-x"))

	(lm/leader-keys
		"SPC" '(set-mark-command :which-key "toggle mark"))

#+end_src
*** COMMENT tabs
#+begin_src emacs-lisp
  (lm/leader-keys
    "t" '(:ignored t :which-key "tab")
    "tn" '(tab-new :which-key "new")
    "tj" '(tab-next :which-key "next")
    "tk" '(tab-previous :which-key "previous")
    "td" '(tab-close :which-key "close")
    "TAB" '(tab-next :which-key "next tab")
    "<backtab>" '(tab-previous :which-key "previous tab"))
#+end_src
*** COMMENT buffer
#+begin_src emacs-lisp
  (lm/leader-keys
    "b"  '(:ignore t :which-key "buffer")
    "bf" '(counsel-find-file :which-key "find file")
    "bs" '(save-buffer :which-key "save buffer")
    "bd" '(kill-buffer :which-key "kill buffer")
    "bl" '(ivy-switch-buffer :which-key "switch buffer")
    "bL" '(list-buffers :which-key "list buffers"))
#+end_src
*** COMMENT search
#+begin_src emacs-lisp
  (lm/leader-keys
    "s" '(:ignore t :which-key "search")
    "ss" '(swiper-isearch :which-key "search")
    "sr" '(replace-string :which-key "replace"))
#+end_src

*** COMMENT appearence
#+begin_src emacs-lisp
  (lm/leader-keys
    "a"  '(:ignore t :which-key "appearence")
    "a+" '(text-scale-increase :which-key "increase scale")
    "a-" '(text-scale-decrease :which-key "decrease scale")
    "at" '(counsel-load-theme :which-key "choose theme"))
#+end_src
*** COMMENT eval
#+begin_src emacs-lisp
  (defun load-init () (interactive)
	 (load-file "~/.config/emacs/init.el"))
  (lm/leader-keys
    "v" '(:ignored t :which-key "eval")
    "vb" '(eval-buffer :which-key "eval buffer")
    "vl" '(eval-last-sexp :which-key "eval last sexp")
    "vi" '(load-init :which-key "load init.el"))
#+end_src

*** COMMENT window
#+begin_src emacs-lisp
  (lm/leader-keys
    "w" '(:ignored t :which-key "window")
    "wo" '(delete-other-windows :which-key "delete other windows")
    "wc" '(delete-window :which-key "delete window")
    "ws" '(split-window-below :which-key "split horizontal")
    "wv" '(split-window-right :which-key "split vertical"))
#+end_src

*** COMMENT termin al
#+begin_src emacs-lisp
  (lm/leader-keys
    "T" '(:ignored t :which-key "terminal")
    "Tv" '(term :which-key "term")
    "Ts" '(eshell :which-key "eshell"))
#+end_src

*** COMMENT explore
#+begin_src emacs-lisp
  (lm/leader-keys
    "e" '(:ignored t :which-key "explore")
    "ed" '(dired :which-key "dired")
    "ec" '(pwd :which-key "pwd"))
#+end_src
*** COMMENT lsp
#+begin_src emacs-lisp
  (defun lm/lsp-keymap ()
    (interactive)
    (lm/leader-keys
      "l" '(:ignored t :which-key "lsp")
      "lf" '(lsp-format-buffer :which-key "format")))
  (add-hook 'lsp-mode-hook 'lm/lsp-keymap)
#+end_src

* Org-mode
Basic configuration of org mode files.
** Syntax colouring on latex export
Enable auto-fill in org-mode (automatically insert newline after columnt 80) and
syntax coloring source code when exporting in latex. To enable the syntax
highlights remember to add

#+begin_src 
  #+LATEX_HEADER: \usepackage{listings}
#+end_src

on the top of the org file.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'(lambda ()
			       (auto-fill-mode)
			       (require 'ox-latex)
			       (setq org-latex-listings t)
			       (setq org-latex-listings-langs '(C python))))
#+end_src

** hide rich-text symbols
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

** auto tangle configuration files
#+begin_src emacs-lisp
  ;; Automatically tangle our init.org config file when we save it
  (defun lm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(concat lm/dotfiles "/emacs/init.org"))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle)
	(load-file (concat user-emacs-directory "init.el")))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'lm/org-babel-tangle-config)))

  ;; Move the tangled file to emacs directory
  (defun lm/org-tangle-to-init ()
    (interactive)
    (org-babel-tangle)
    (copy-file "./init.el" (concat user-emacs-directory "init.el") t)
    (load-file (concat user-emacs-directory "init.el")))


#+end_src

** org-babel
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #' (lambda ()
				(require 'org-tempo)
				(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
				(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
				(add-to-list 'org-structure-template-alist '("py" . "src python"))))
  (setq org-confirm-babel-evaluate nil)
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :defer 5
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (put 'dired-find-alternate-file 'disabled nil))
#+end_src

* My functions
** lm/yasnippet-complete
This function is used to choose the correct yasnippets completion function
depending of the current selection method
#+begin_src emacs-lisp
  (defun lm/yasnippet-complete ()
    (interactive)
    (cond ((boundp 'lm/company) (company-complete))
	  (t (yas-insert-snippet))))
#+end_src
** ripgrep
ask for searching in files with ripgrep
#+begin_src emacs-lisp
  (defun lm/ripgrep (&optional pattern path)
    (interactive)
    (let ((_pattern (if pattern pattern
		      (read-from-minibuffer "grep pattern: ")))
	  (_path (if path path
		   (read-from-minibuffer "grep path: " default-directory))))
      (grep-find (concat "rg -n -H --no-heading -e " _pattern " " _path))))
#+end_src
** Wezterm
Often i use wezterm as terminal choise
https://wezfurlong.org/wezterm/installation.html
because emacs, expecially on windows does not provide a good terminal mode. So
i need a way to easily call wezterm and open it in the current directory.

#+begin_src emacs-lisp
  (defun lm/run-wezterm ()
    (interactive)
    (start-process "wezterm" nil "wezterm" "start" "--cwd"
		   default-directory))
#+end_src

** Resize font
#+begin_src emacs-lisp
  (defvar lm/font-increase-step 5)
  (defun lm/font-increase ()
    (interactive)
    (set-face-attribute
     'default
     nil
     :height (+ (face-attribute 'default :height) lm/font-increase-step)))

  (defun lm/font-decrease ()
    (interactive)
    (set-face-attribute
     'default
     nil
     :height (- (face-attribute 'default :height) lm/font-increase-step)))

#+end_src
* Other stuff
** initial warnings
Those are some workarounds for warning messages at startup. Not all are
understood and explained
#+begin_src emacs-lisp
(setq org-element-use-cache t)
#+end_src

* Testing
** COMMENT ido-mode
ido-mode enable some autocompletions in minibuffer

#+begin_src emacs-lisp
  (use-package ido
    :config
    (ido-mode t))
#+end_src

** COMMENT cygwin64
If under windows may be a good choise to use a native emacs build with the
support of bash provided by cygwin64
#+begin_src emacs-lisp
  (if (string-equal system-type "windows-nt")
      (let* ((cygwin-root "D:/cygwin64")
	     (cygwin-bin (concat cygwin-root "/bin")))
	(if (file-readable-p cygwin-root)
	    (progn
	      (setq shell-file-name "bash")
	      (setenv "SHELL" shell-file-name)
	      (setq explicit-shell-file-name shell-file-name)))))
#+end_src

#+RESULTS:
: bash







* COMMENT abled features
** plugins
*** company
#+begin_src emacs-lisp
  (use-package company
    :bind (("C-." . company-complete))
    :init
    (setq lm/company t)
    :config
    (global-company-mode t)
    (setq company-keywords-ignore-case t)
    (setq company-idle-delay 0.5))
#+end_src
*** ivy, swiper, counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))
  (use-package ivy-rich
    :diminish
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (ivy-rich-mode 1))
  (use-package swiper)
  (use-package counsel)
#+end_src
*** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src
*** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :commands eglot
    :config
    (add-to-list 'eglot-server-programs
		 `(python-mode
		   . ,(eglot-alternatives '("pylsp"))))
    (setq eglot-autoshutdown t))

#+end_src

** Keybindings (with evil)
Those are keybinding i use with evil mode, anyway i found evil conflicting a lot
with other keymapping of basic emacs and with most of the usefull tips that can
be found online
*** global
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** general
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer lm/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (lm/leader-keys
    "RET" '(counsel-M-x :which-key "M-x"))
#+end_src

*** evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** tabs
#+begin_src emacs-lisp
  (lm/leader-keys
    "t" '(:ignored t :which-key "tab")
    "tn" '(tab-new :which-key "new")
    "tj" '(tab-next :which-key "next")
    "tk" '(tab-previous :which-key "previous")
    "td" '(tab-close :which-key "close")
    "TAB" '(tab-next :which-key "next tab")
    "<backtab>" '(tab-previous :which-key "previous tab"))
#+end_src

*** buffer
#+begin_src emacs-lisp
  (lm/leader-keys
    "b"  '(:ignore t :which-key "buffer")
    "bf" '(counsel-find-file :which-key "find file")
    "bs" '(save-buffer :which-key "save buffer")
    "bd" '(kill-buffer :which-key "kill buffer")
    "bl" '(ivy-switch-buffer :which-key "switch buffer")
    "bL" '(list-buffers :which-key "list buffers"))
#+end_src

*** search
#+begin_src emacs-lisp
  (lm/leader-keys
    "s" '(:ignore t :which-key "search")
    "ss" '(swiper-isearch :which-key "search")
    "sr" '(replace-string :which-key "replace"))
#+end_src

*** appearence
#+begin_src emacs-lisp
  (lm/leader-keys
    "a"  '(:ignore t :which-key "appearence")
    "a+" '(text-scale-increase :which-key "increase scale")
    "a-" '(text-scale-decrease :which-key "decrease scale")
    "at" '(counsel-load-theme :which-key "choose theme"))
#+end_src

*** eval
#+begin_src emacs-lisp
  (defun load-init () (interactive)
	 (load-file "~/.config/emacs/init.el"))
  (lm/leader-keys
    "v" '(:ignored t :which-key "eval")
    "vb" '(eval-buffer :which-key "eval buffer")
    "vl" '(eval-last-sexp :which-key "eval last sexp")
    "vi" '(load-init :which-key "load init.el"))
#+end_src

*** window
#+begin_src emacs-lisp
  (lm/leader-keys
    "w" '(:ignored t :which-key "window")
    "wo" '(delete-other-windows :which-key "delete other windows")
    "wc" '(evil-window-delete :which-key "delete window")
    "ws" '(evil-window-split :which-key "split horizontal")
    "wv" '(evil-window-vsplit :which-key "split vertical")
    "wh" '(evil-window-left :which-key "move left")
    "wj" '(evil-window-down :which-key "move down")
    "wk" '(evil-window-up :which-key "move up")
    "wl" '(evil-window-right :which-key "move right"))
#+end_src

*** terminal
#+begin_src emacs-lisp
  (lm/leader-keys
    "T" '(:ignored t :which-key "terminal")
    "Tv" '(vterm :which-key "vterm")
    "Ts" '(eshell :which-key "eshell"))
#+end_src

*** explore
#+begin_src emacs-lisp
  (lm/leader-keys
    "e" '(:ignored t :which-key "explore")
    "ed" '(dired :which-key "dired")
    "ec" '(pwd :which-key "pwd"))
#+end_src

*** lsp
#+begin_src emacs-lisp
  (defun lm/lsp-keymap ()
    (interactive)
    (lm/leader-keys
      "l" '(:ignored t :which-key "lsp")
      "lf" '(lsp-format-buffer :which-key "format")))
  (add-hook 'lsp-mode-hook 'lm/lsp-keymap)
#+end_src

* COMMENT Notes
** elisp
this function lets you view the previous invoked commands
#+begin_src emacs-lisp
(view-lossage)
#+end_src


