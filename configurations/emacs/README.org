#+title: My Emacs Configuration
#+property: header-args:emacs-lisp :tangle "init.el" :mkdirp yes

* Intro
This is my emacs configuration. It's a mess.
Here are the configuration i took from to build mine:
- /minimal-emacs.d/ configuration of jamescherti https://github.com/jamescherti/minimal-emacs.d
- the excellent [[https://protesilaos.com/emacs/dotemacs][config]] of Protesilaos Stavrou

* Setup
** Install emacs
Emacs can both be installed from a package manager or built from sources.
This is a quick snippet to configure the emacs sources for linux:

#+begin_src shell
  ./configure --prefix=/usr/local --with-x-toolkit=gtk3 --disable-gc-mark-trace --with-native-compilation=aot --without-gif --without-tiff --without-selinux --without-xinput2 --without-gpm --without-compress-install --without-xft --with-cairo --with-harfbuzz --with-tree-sitter=ifavailable --without-gsettings --without-gconf
#+end_src

** Tangle this org literate config
Evaluate this line before tangling the whole file to avoid being
asked if confirm every code block
#+begin_src emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+end_src
** ways to swap CTRL and CAPS-LOCK
*** Windows

to activate run this script as a .reg file
#+begin_src
REGEDIT4

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,00,3a,00,3a,00,1d,00,00,00,00,00
#+end_src

and run that as a .reg file to deactivate it

#+begin_src 
REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=-
#+end_src

*** Linux
On Linux, using the X Windows Server it just need to run or put it in the init
script.

#+begin_src shell
  setxkbmap -option ctrl:swapcaps
#+end_src

** Linux
*** start server at startup script
Copy this to *"~/.config/systemd/user/emacs.service"*
#+begin_src shell
  [Unit]
  Description=Emacs text editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon
  ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src
and the enable the service with
#+begin_src shell
  systemctl enable --user emacs
  systemctl start --user emacs
#+end_src

** Windows
*** start server at startup script
#+begin_src shell
  # Path to startup file
  $startup_file = "$([Environment]::GetFolderPath('Startup'))\StartEmacsServer.bat"

  # Introduce variable HOME:
  # 1. for simplicity
  # 2. runemacs.exe expects it to be
  #
  # %APPDATA% is chosen because runemacs.exe operates there
  #	https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init
  #	https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables
  New-Item $startup_file -type file
  Set-Content -Path $startup_file -Value "set HOME=%APPDATA%"

  # Clean previous server file info first
  Add-Content -Path $startup_file -Value "del /Q ""%HOME%/.emacs.d/server/*"""
  Add-Content -Path $startup_file -Value "runemacs.exe --daemon"
#+end_src

*** install from scoop
The best way i found to install emacs on windows is via *scoop* and create a
script on *$USERPATH/Roaming/Microsoft/Windows/Start Menu/Programs/Startup* that
starts the emacs server automatically at the startup.

#+begin_src shell
  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
  irm get.scoop.sh | iex
  scoop update *
  scoop buckets add kiennq-scoop
  scoop install emacs-k
#+end_src

*** build from source
- install msys2
- run this script
#+begin_src shell
  git clone https://github.com/emacs-mirror/emacs emacs-master  
  cd emacs-master
  mingw64-bat
  pacman -S --needed \
         base-devel \
         autoconf \
         mingw-w64-x86_64-toolchain \
         mingw-w64-x86_64-xpm-nox \
         mingw-w64-x86_64-gmp \
         mingw-w64-x86_64-gnutls \
         mingw-w64-x86_64-libtiff \
         mingw-w64-x86_64-giflib \
         mingw-w64-x86_64-libpng \
         mingw-w64-x86_64-libjpeg-turbo \
         mingw-w64-x86_64-librsvg \
         mingw-w64-x86_64-libwebp \
         mingw-w64-x86_64-lcms2 \
         mingw-w64-x86_64-jansson \
         mingw-w64-x86_64-libxml2 \
         mingw-w64-x86_64-zlib \
         mingw-w64-x86_64-harfbuzz \
         mingw-w64-x86_64-libgccjit \
         mingw-w64-x86_64-sqlite3 \
         mingw-w64-x86_64-tree-sitter
  ./autogen.sh
  ./configure --with-native-compilation=yes --with-tree-sitter --without-dbus --with-json --with-wide-int
  make
  make install
#+end_src

*** find
Under windows when emacs looks for *find* command it found one, but the wrong
one. One solution is to use MSYS2's one. So go to the
<MSYS2 ROOT>/usr/bin/ and copy
msys-iconv-2.dll
msys-intl-8.dll
find.exe
to the emacs bin folder* COMMENT User defined stuff
* Early init
** Windows frame
The initial-frame-alist is about the first frame that is produced when starting
Emacs. The default-frame-alist is for all frames after that.

#+begin_src emacs-lisp :tangle "early-init.el"
  (defun lm-add-to-list (list element)
    "Add to symbol of LIST the given ELEMENT.
  Simplified version of `add-to-list'."
    (set list (cons element (symbol-value list))))

  (mapc
   (lambda (var)
     (lm-add-to-list var '(width . (text-pixels . 800)))
     (lm-add-to-list var '(height . (text-pixels . 900)))
     (lm-add-to-list var '(scroll-bar-width  . 10)))
   '(default-frame-alist initial-frame-alist))
#+end_src

** Ui features
Enable or disable some UI features:
- menu-bar-mode
- tool-bar-mode
- context-menu
- dialogs
- tooltips
- frame title
- emacs welcome page

#+begin_src emacs-lisp :tangle "early-init.el"
  (defvar lm-emacs-ui-features '(context-menu)
    "List of user interface features to disable in minimal Emacs setup.

      This variable holds a list Emacs UI features that can be enabled:
      - `context-menu`: Enables the context menu in graphical environments.
      - `tool-bar`: Enables the tool bar in graphical environments.
      - `menu-bar`: Enables the menu bar in graphical environments.
      - `dialogs`: Enables both file dialogs and dialog boxes.
      - `tooltips`: Enables tooltips.

      Each feature in the list corresponds to a specific UI component that can be
      turned on."
    )

  (defvar lm-emacs-frame-title-format "%b â€“ Emacs"
    "Template for displaying the title bar of visible and iconified frame.")
  (setq frame-title-format lm-emacs-frame-title-format
        icon-title-format lm-emacs-frame-title-format)

  ;; Disable startup screens and messages
  (setq inhibit-splash-screen t)

  ;; I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;; `scroll-bar-mode' because manipulating frame parameters can trigger or queue
  ;; a superfluous and potentially expensive frame redraw at startup, depending
  ;; on the window system. The variables must also be set to `nil' so users don't
  ;; have to call the functions twice to re-enable them.
  (unless (memq 'menu-bar lm-emacs-ui-features)
    (push '(menu-bar-lines . 0) default-frame-alist)
    (unless (memq window-system '(mac ns))
      (setq menu-bar-mode nil)))

  (unless (daemonp)
    (unless noninteractive
      ;; Temporarily override the tool-bar-setup function to prevent it from
      ;; running during the initial stages of startup
      (advice-add #'tool-bar-setup :override #'ignore)
      (define-advice startup--load-user-init-file
          (:before (&rest _) lm-emacs-setup-toolbar)
        (advice-remove #'tool-bar-setup #'ignore)
        (tool-bar-setup))))
  (unless (memq 'tool-bar lm-emacs-ui-features)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (setq tool-bar-mode nil))

  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq scroll-bar-mode nil)
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (unless (memq 'tooltips lm-emacs-ui-features)
    (when (bound-and-true-p tooltip-mode)
      (tooltip-mode -1)))

  ;; Disable GUIs because they are inconsistent across systems, desktop
  ;; environments, and themes, and they don't match the look of Emacs.
  (unless (memq 'dialogs lm-emacs-ui-features)
    (setq use-file-dialog nil)
    (setq use-dialog-box nil))

  (defalias #'view-hello-file #'ignore)  ; Never show the hello file

#+end_src

** Package management
Configure /package.el/, the builtin package manager, disable it at startup and
set up the packages archives and their priorities.

#+begin_src emacs-lisp :tangle "early-init.el" 
  ;; Ensure that some built-in (e.g., org-mode) are always up to date
  (setq package-install-upgrade-built-in t)

  (defvar lm-emacs-package-initialize-and-refresh t
    "Whether to automatically initialize and refresh packages.
            When set to non-nil, Emacs will automatically call `package-initialize' and
            `package-refresh-contents' to set up and update the package system.")

  (setq package-enable-at-startup nil)
  (setq package-quickstart nil)
  (setq use-package-always-ensure nil)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("elpa-devel" . "https://elpa.gnu.org/devel/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (customize-set-variable 'package-archive-priorities '(("elpa" . 100)
                                                        ("elpa-devel" . 101)
                                                        ("gnu"    . 99)
                                                        ("nongnu" . 80)
                                                        ("stable" . 70)
                                                        ("melpa"  . 0)))

#+end_src

** Load file
This function load a file if exists

#+begin_src emacs-lisp
  (defun lm-emacs-load-user-init (filename)
    "Execute a file of Lisp code named FILENAME."
    (let ((user-init-file
           (expand-file-name filename
                             lm-emacs-user-directory)))
      (when (file-exists-p user-init-file)
        (load user-init-file nil t))))
#+end_src

** User files
Set some useful paths:
- the emacs config directory
- the custom themes directory
and add the /lm-lisp/ and /lm-modules/ directories to the load-path.

#+begin_src emacs-lisp :tangle "early-init.el"
  (defvar lm-emacs-user-directory user-emacs-directory
    "The default value of the `user-emacs-directory' variable.")

  (setq custom-theme-directory
        (expand-file-name "themes/" lm-emacs-user-directory))

  ;; Add the folder of my cust lisp files and modules to the load-path
  (mapc (lambda (string)
          (add-to-list 'load-path (concat lm-emacs-user-directory string)))
        '("lm-lisp" "lm-modules" "lm-languages"))

  (setq custom-file (expand-file-name "custom.el" lm-emacs-user-directory))
#+end_src

** Garbage collector and process memory
This does a lot of stuff that i don't know entirely. Basically it increases the
garbage collector size when starting up and restore it when emacs has been
loaded and configure some others variables of emacs to increase it performance.

#+begin_src emacs-lisp :tangle "early-init.el" 
      ;;; increase garbage collector when load
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (defvar lm-emacs-gc-cons-threshold (* 16 1024 1024)
    "The value of `gc-cons-threshold' after Emacs startup.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold lm-emacs-gc-cons-threshold
                    gc-cons-percentage 0.1 )))

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  (setq read-process-output-max (* 512 1024))  ; 512kb

  ;; Prefer loading newer compiled files
  (setq load-prefer-newer t)

  (defvar lm-emacs-debug nil 
    "Non-nil to enable debug.")

  ;; Reduce rendering/line scan work by not rendering cursors or regions in
  ;; non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; Disable warnings from the legacy advice API. They aren't useful.
  (setq ad-redefinition-action 'accept)

  (setq warning-suppress-types '((lexical-binding)))

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; By default, Emacs "updates" its ui more often than it needs to
  (setq idle-update-delay 1.0)

  ;; Font compacting can be very resource-intensive, especially when rendering
  ;; icon fonts on Windows. This will increase memory usage.
  (setq inhibit-compacting-font-caches t)

  (unless (daemonp)
    ;; (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
    ;;   (set-default-toplevel-value
    ;;    'file-name-handler-alist
    ;;    ;; Determine the state of bundled libraries using calc-loaddefs.el.
    ;;    ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
    ;;    ;; If compiled or neither, omit the gzip handler during startup for
    ;;    ;; improved startup and package load time.
    ;;    (if (eval-when-compile
    ;;          (locate-file-internal "calc-loaddefs.el" load-path))
    ;;        nil
    ;;      (list (rassq 'jka-compr-handler old-value))))
    ;;   ;; Ensure the new value persists through any current let-binding.
    ;;   (set-default-toplevel-value 'file-name-handler-alist
    ;;                               file-name-handler-alist)
    ;;   ;; Remember the old value to reset it as needed.
    ;;   (add-hook 'emacs-startup-hook
    ;;             (lambda ()
    ;;               (set-default-toplevel-value
    ;;                'file-name-handler-alist
    ;;                ;; Merge instead of overwrite to preserve any changes made
    ;;                ;; since startup.
    ;;                (delete-dups (append file-name-handler-alist old-value))))
    ;;             101))

    ;;  (let ((old-file-name-handler-alist file-name-handler-alist))
    ;;    (setq vc-handled-backends nil)
    ;;    (add-hook 'emacs-startup-hook
    ;;              (lambda ()
    ;;                (setq vc-handled-backends old-vc-handled-backends))))

    (unless noninteractive
      (progn
        ;; Disable mode-line-format during init
        (defun lm-emacs--reset-inhibited-vars-h ()
          (setq-default inhibit-redisplay nil
                        ;; Inhibiting `message' only prevents redraws and
                        inhibit-message nil)
          (redraw-frame))

        (defvar lm-emacs--default-mode-line-format mode-line-format
          "Default value of `mode-line-format'.")
        (setq-default mode-line-format nil)

        (defun lm-emacs--startup-load-user-init-file (fn &rest args)
          "Advice for startup--load-user-init-file to reset mode-line-format."
          (let (init)
            (unwind-protect
                (progn
                  (apply fn args)  ; Start up as normal
                  (setq init t))
              (unless init
                ;; If we don't undo inhibit-{message, redisplay} and there's an
                ;; error, we'll see nothing but a blank Emacs frame.
                (lm-emacs--reset-inhibited-vars-h))
              (unless (default-toplevel-value 'mode-line-format)
                (setq-default mode-line-format
                              lm-emacs--default-mode-line-format)))))

        (advice-add 'startup--load-user-init-file :around
                    #'lm-emacs--startup-load-user-init-file))


      ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted.
      ;; No second pass of case-insensitive search over auto-mode-alist.
      (setq auto-mode-case-fold nil)

      ;; Reduce *Message* noise at startup. An empty scratch buffer (or the
      ;; dashboard) is more than enough, and faster to display.
      (setq inhibit-startup-screen t
            inhibit-startup-echo-area-message user-login-name)
      (setq initial-buffer-choice nil
            inhibit-startup-buffer-menu t
            inhibit-x-resources t)

      ;; Disable bidirectional text scanning for a modest performance boost.
      (setq-default bidi-display-reordering 'left-to-right
                    bidi-paragraph-direction 'left-to-right)

      ;; Give up some bidirectional functionality for slightly faster re-display.
      (setq bidi-inhibit-bpa t)

      ;; Remove "For information about GNU Emacs..." message at startup
      (advice-add #'display-startup-echo-area-message :override #'ignore)

      ;; Suppress the vanilla startup screen completely. We've disabled it with
      ;; `inhibit-startup-screen', but it would still initialize anyway.
      (advice-add #'display-startup-screen :override #'ignore)

      ;; Shave seconds off startup time by starting the scratch buffer in
      ;; `fundamental-mode'
      (setq initial-major-mode 'fundamental-mode
            initial-scratch-message nil)

      (unless lm-emacs-debug
        ;; Unset command line options irrelevant to the current OS. These options
        ;; are still processed by `command-line-1` but have no effect.
        (unless (eq system-type 'darwin)
          (setq command-line-ns-option-alist nil))
        (unless (memq initial-window-system '(x pgtk))
          (setq command-line-x-option-alist nil)))))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s with %d garbage collections."
                       (emacs-init-time) gcs-done)))
#+end_src

** Language environment
Set the language enviroment and all relate input methods to UTF-8

#+begin_src emacs-lisp :tangle "early-init.el"
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; Set-language-environment sets default-input-method, which is unwanted.
  (setq default-input-method nil)

  ;; Some features that are not represented as packages can be found in
  ;; `features', but this can be inconsistent. The following enforce consistency:
  (if (fboundp #'json-parse-string)
      (push 'jansson features))
  (if (string-match-p "HARFBUZZ" system-configuration-features) ; no alternative
      (push 'harfbuzz features))
  (if (bound-and-true-p module-file-suffix)
      (push 'dynamic-modules features))

#+end_src

** Native compilation and Byte compilation
Enable native compilation if possible and stops all the annoying warnings
produced during compilation.

#+begin_src emacs-lisp :tangle "early-init.el"
  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      ;; Activate `native-compile'
      (setq native-comp-jit-compilation t
            native-comp-deferred-compilation t  ; Obsolete since Emacs 29.1
            package-native-compile t)
    ;; Deactivate the `native-compile' feature if it is not available
    (setq features (delq 'native-compile features)))

  ;; Suppress compiler warnings and don't inundate users with their popups.
  (setq native-comp-async-report-warnings-errors
        (or lm-emacs-debug 'silent))
  (setq native-comp-warning-on-missing-source lm-emacs-debug)

  (setq debug-on-error lm-emacs-debug
        jka-compr-verbose lm-emacs-debug)
  (setq comp-async-report-warnings-errors nil)

  (setq byte-compile-warnings lm-emacs-debug)
  (setq byte-compile-verbose lm-emacs-debug)
#+end_src

** Provide early-init
Provides /early-init.el/ as a module.

#+begin_src emacs-lisp :tangle "early-init.el"
  (provide 'early-init)
#+end_src
* Init
** Configuration files
#+begin_src emacs-lisp :tangle "init.el"
  (setq lm/literate-config-name "README.org")
  (setq lm/dot-dir (file-name-directory (directory-file-name lm-emacs-user-directory)))
  (setq lm/sound-dir (concat lm/dot-dir "sounds/"))
#+end_src
** Custom groups, options and modules
The goal of this section is to declare custom variables that can be
customizated that control which module should be loaded.

#+begin_src emacs-lisp :tangle "init.el"
  (defcustom lm-input-mode 'evil
    "The keymap mode to use."
    :type '(choice
            (const :tag "evil" evil)
            (const :tag "emacs" emacs))
    :group 'lm)

  (defcustom lm-key-clues 'off
    "The framework to provide clues for keymaps"
    :type '(choice
            (const :tag "which-key" which-key)
            (const :tag "off" nil))
    :group 'lm)

  (defcustom lm-lsp-client 'off 
    "The LSP implementation to use."
    :type '(choice
            (const :tag "eglot" eglot)
            (const :tag "lsp-mode" lsp-mode)
            (const :tag "off" nil))
    :group 'lm)

  (defcustom lm-capf-cape 'off
    "Wheter to use or not cape package for enhance the completion at point
  functions"
    :type '(choice
            (const :tag "on" on)
            (const :tag "off" off))
    :group 'lm)

  (defcustom lm-in-buffer-completion 'builtin
    "The in-buffer completion to use."
    :type '(choice
            (const :tag "corfu" corfu)
            (const :tag "company" company)
            (const :tag "builtin" builtin))
    :group 'lm)

  (defcustom lm-terminal-emulator 'off
    "The terminal emulator inside emacs"
    :type '(choice
            (const :tag "eat" 'eat)
            (const :tag "off" nil))
    :group 'lm)

  (defcustom lm-ligatures 'off
    "Enables fonts ligatures."
    :type '(choice
            (const :tag "on" 1)
            (const :tag "off" nil))
    :group 'lm)
#+end_src

** My functions
*** Actions
hose are functions that wrap some kind of action so that if a plugin
eed to override some default behaviour can ovverride this action and
he whole ecosystem can be still coearent.

#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-action-complete ()
   (interactive)
   nil)
#+end_src
*** Inserting special characters for italian keyboard
Tilde and grave accent are not present in italian keyboard but often used in
rogramming so this function are a quick way to insert them in text

#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-action-insert-tilde ()                                      
   (interactive)                                 
   (insert-char (char-from-name "TILDE")))
 (defun lm-action-insert-grave-accent ()                                      
   (interactive)                                 
   (insert-char (char-from-name "GRAVE ACCENT")))
#+end_src
This function returns the directory containing this org file in case it differs
from the actual emacs config dir
#+begin_src emacs-lisp :tangle "init.el"
 (defun lm/get-conf-org-dir ()
   (interactive)
   (file-name-directory buffer-file-name))
#+end_src
*** Switching tabs
#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-action-switch-to-tab-1 ()
   (interactive)
   (tab-bar-select-tab 1))
 (defun lm-action-switch-to-tab-2 ()
   (interactive)
   (tab-bar-select-tab 2))
 (defun lm-action-switch-to-tab-3 ()
   (interactive)
   (tab-bar-select-tab 3))
#+end_src
*** Open literate config
#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-open-literate-config ()
   (interactive)
   (find-file (concat lm-emacs-user-directory lm/literate-config-name)))
#+end_src
*** Open post-init.el
#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-open-post-init ()
   (interactive)
   (find-file (concat lm-emacs-user-directory "post-init.el")))
#+end_src
*** Reload configuration
#+begin_src emacs-lisp :tangle "init.el"
 (defun lm-reload-config ()
   (interactive)
   (load (concat user-emacs-directory "init.el")))
#+end_src
*** Pomodoro
#+begin_src emacs-lisp :tangle "init.el"
  (defun lm-pomodoro ()
    (interactive)
    (require 'org-element)
    (setq org-clock-sound (concat lm/sound-dir "bell.wav"))
    (unless (boundp 'lm/pomodoro-state)
      (setq lm/pomodoro-state 0))
    (let ((time-work "00:25:00")
          (time-pause "00:05:00"))
      (org-timer-set-timer
       (cond
        ((= (mod lm/pomodoro-state 2) 0) time-work)
        ((= (mod lm/pomodoro-state 3) 0) time-work)
        (t time-pause)))
      (setq lm/pomodoro-state (+ lm/pomodoro-state 1))))
#+end_src						
** use-package
/use-package/ is a nice and useful package manager

- the /use-package-always-ensure/ variable means that package not
  already present will be downloaded
- the /use-package-compute-statistics/ enable to profile the startup time of
  installed packages via the *use-package-profile* command.
- diminish is used to hide some mode from mode bar
  
#+begin_src emacs-lisp
  ;; ;;; package.el
  (when (bound-and-true-p lm-emacs-package-initialize-and-refresh)
    ;; Initialize and refresh package contents again if needed
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Install use-package if necessary
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    ;; Ensure use-package is available at compile time
    (eval-when-compile
      (require 'use-package)))

  (setq use-package-always-ensure nil)
  (setq use-package-compute-statistics t)

  ;;; Minibuffer
  ;; Allow nested minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Keep the cursor out of the read-only portions of the.minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

*** diminish
*diminish* enable to hide minor-mode names from minibuffer.  To hide a
minor-mode put `:diminish` in the use-package configuration of the
mode package

#+begin_src emacs-lisp
    (use-package diminish
      :ensure t)
#+end_src

** Editor behaviour
*** Misc
#+begin_src emacs-lisp
  ;; switch-to-buffer runs pop-to-buffer-same-window instead
  (setq switch-to-buffer-obey-display-actions t)

  (setq show-paren-delay 0.1
        show-paren-highlight-openparen t
        show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)

  (setq whitespace-line-column nil)  ; whitespace-mode

  ;; I reduced the default value of 9 to simplify the font-lock keyword,
  ;; aiming to improve performance. This package helps differentiate
  ;; nested delimiter pairs, particularly in languages with heavy use of
  ;; parentheses.
  (setq rainbow-delimiters-max-face-count 5)

  ;; Can be activated with `display-line-numbers-mode'
  (setq-default display-line-numbers-width 3)
  (setq-default display-line-numbers-widen t)

  (setq comint-prompt-read-only t)
  (setq comint-buffer-maximum-size 2048)

  (setq compilation-always-kill t
        compilation-ask-about-save nil
        compilation-scroll-output 'first-error)

  (setq truncate-string-ellipsis "â€¦")

  ;; Configure Emacs to ask for confirmation before exiting
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Delete by moving to trash in interactive mode
  (setq delete-by-moving-to-trash (not noninteractive))
#+end_src

*** Files
#+begin_src emacs-lisp
  ;; Disable the warning "X and Y are the same file". Ignoring this warning is
  ;; acceptable since it will redirect you to the existing buffer regardless.
  (setq find-file-suppress-same-file-warnings t)

  ;; Resolve symlinks when opening files, so that any operations are conducted
  ;; from the file's true directory (like `find-file').
  (setq find-file-visit-truename t
        vc-follow-symlinks t)

  ;; Skip confirmation prompts when creating a new file or buffer
  (setq confirm-nonexistent-file-or-buffer nil)

  (setq uniquify-buffer-name-style 'forward)

  (setq mouse-yank-at-point t)

  ;; Prefer vertical splits over horizontal ones
  (setq split-width-threshold 170
        split-height-threshold nil)

  ;; The native border "uses" a pixel of the fringe on the rightmost
  ;; splits, whereas `window-divider` does not.
  (setq window-divider-default-bottom-width 1 ;
        window-divider-default-places t
        window-divider-default-right-width 1)

  (add-hook 'after-init-hook #'window-divider-mode)
#+end_src

*** Backup files
#+begin_src emacs-lisp
  ;; Avoid generating backups or lockfiles to prevent creating world-readable
  ;; copies of files.
  (setq create-lockfiles nil)
  (setq make-backup-files nil)

  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backup" user-emacs-directory))))
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq backup-by-copying-when-linked t)
  (setq backup-by-copying t)  ; Backup by copying rather renaming
  (setq delete-old-versions t)  ; Delete excess backup versions silently
  (setq version-control t)  ; Use version numbers for backup files
  (setq kept-new-versions 5)
  (setq kept-old-versions 5)
  (setq vc-make-backup-files nil)  ; Do not backup version controlled files
#+end_src

*** Auto save
#+begin_src emacs-lisp
  ;; Enable auto-save to safeguard against crashes or data loss. The
  ;; `recover-file' or `recover-session' functions can be used to restore
  ;; auto-saved data.
  (setq auto-save-default t)

  ;; Do not auto-disable auto-save after deleting large chunks of
  ;; text. The purpose of auto-save is to provide a failsafe, and
  ;; disabling it contradicts this objective.
  (setq auto-save-include-big-deletions t)

  (setq auto-save-list-file-prefix
        (expand-file-name "autosave/" user-emacs-directory))
  (setq tramp-auto-save-directory
        (expand-file-name "tramp-autosave/" user-emacs-directory))

  ;; Auto save options
  (setq kill-buffer-delete-auto-save-files t)
#+end_src

*** Auto revert
#+begin_src emacs-lisp
  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (setq revert-without-query (list ".")  ; Do not prompt
        auto-revert-stop-on-user-input nil
        auto-revert-verbose t)

  ;; Revert other buffers (e.g, Dired)
  (setq global-auto-revert-non-file-buffers t)
  (global-auto-revert-mode t)
#+end_src

*** Worspaces save
#+begin_src emacs-lisp
  (setq desktop-path '((expand-file-name "desktop-saves") user-emacs-directory))
#+end_src
*** Automatic pairs mode
automatically insert the pair of some symbols like braces, parenthesis, etc...

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src
*** Y/n answers
#+begin_src emacs-lisp
  ;; Allow for shorter responses: "y" for yes and "n" for no.
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add #'yes-or-no-p :override #'y-or-n-p))
#+end_src
*** Recent files
#+begin_src emacs-lisp
  ;; `recentf' is an Emacs package that maintailinens a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (setq recentf-max-saved-items 300) ; default is 20
  (setq recentf-auto-cleanup 'mode)
#+end_src

*** Save place
#+begin_src emacs-lisp
  ;; `save-place-mode` enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
  (setq save-place-limit 600)
#+end_src

*** Save hist
#+begin_src emacs-lisp
  ;; `savehist` is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (setq history-length 300)
  (setq savehist-save-minibuffer-history t)  ;; Default
#+end_src

*** Frames and windows
#+begin_src emacs-lisp
  ;; Resizing the Emacs frame can be costly when changing the font. Disable this
  ;; to improve startup times with fonts larger than the system default.
  (setq frame-resize-pixelwise t)

  ;; Without this, Emacs will try to resize itself to a specific column size
  (setq frame-inhibit-implied-resize t)

  ;; However, do not resize windows pixelwise, as this can cause crashes in some
  ;; cases when resizing too many windows at once or rapidly.
  (setq window-resize-pixelwise nil)

  (setq resize-mini-windows 'grow-only)
#+end_src

*** Scrolling
#+begin_src emacs-lisp
  ;; Enables faster scrolling through unfontified regions. This may result in
  ;; brief periods of inaccurate syntax highlighting immediately after scrolling,
  ;; which should quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; Keeps screen position if the scroll command moved it vertically out of the
  ;; window.
  (setq scroll-preserve-screen-position t)
#+end_src

*** Mouse
#+begin_src emacs-lisp
  ;; Emacs 29
  (when (memq 'context-menu lm-emacs-ui-features)
    (when (and (display-graphic-p) (fboundp 'context-menu-mode))
      (add-hook 'after-init-hook #'context-menu-mode)))

  (setq hscroll-margin 2
        hscroll-step 1
        ;; Emacs spends excessive time recentering the screen when the cursor
        ;; moves more than N lines past the window edges (where N is the value of
        ;; `scroll-conservatively`). This can be particularly slow in larger files
        ;; during extensive scrolling. If `scroll-conservatively` is set above
        ;; 100, the window is never automatically recentered. The default value of
        ;; 0 triggers recentering too aggressively. Setting it to 10 reduces
        ;; excessive recentering and only recenters the window when scrolling
        ;; significantly off-screen.
        scroll-conservatively 10
        scroll-margin 0
        scroll-preserve-screen-position t
        ;; Reduce cursor lag by preventing automatic adjustments to
        ;; `window-vscroll' for unusually long lines. Setting
        ;; `auto-window-vscroll' it to nil also resolves the issue of random
        ;; half-screen jumps during scrolling.
        auto-window-vscroll nil
        ;; Mouse
        mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 1)
#+end_src

*** Cursor
#+begin_src emacs-lisp
  ;; The blinking cursor is distracting and interferes with cursor settings in
  ;; some minor modes that try to change it buffer-locally (e.g., Treemacs).
  ;; Additionally, it can cause freezing, especially on macOS, for users with
  ;; customized and colored cursors.
  (blink-cursor-mode -1)

  ;; Don't blink the paren matching the one at point, it's too distracting.
  (setq blink-matching-paren nil)

  ;; Don't stretch the cursor to fit wide characters, it is disorienting,
  ;; especially for tabs.
  (setq x-stretch-cursor nil)
#+end_src

*** Annoyances
#+begin_src emacs-lisp
  ;; No beeping or blinking
  (setq visible-bell nil)
  (setq ring-bell-function #'ignore)

  ;; This controls how long Emacs will blink to show the deleted pairs with
  ;; `delete-pair'. A longer delay can be annoying as it causes a noticeable pause
  ;; after each deletion, disrupting the flow of editing.
  (setq delete-pair-blink-delay 0.03)
#+end_src

*** Indent and formatting
#+begin_src emacs-lisp
  (setq-default left-fringe-width  8)
  (setq-default right-fringe-width 8)

  ;; Do not show an arrow at the top/bottomin the fringe and empty lines
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)

  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)

  ;; Disable wrapping by default due to its performance cost.
  (setq-default truncate-lines t)

  ;; If enabled and `truncate-lines' is disabled, soft wrapping will not occur
  ;; when the window is narrower than `truncate-partial-width-windows' characters.
  (setq truncate-partial-width-windows nil)

  ;; Prefer spaces over tabs. Spaces offer a more consistent default compared to
  ;; 8-space tabs. This setting can be adjusted on a per-mode basis as needed.
  (setq-default indent-tabs-mode nil
                tab-width 2)

  ;; Customize the behaviour of the TAB key. Bind it to:
  ;; - `t' Always indent the current line
  ;; - `'complete' Enable indentation and completion using the TAB key
  (setq-default tab-always-indent 'complete)

  ;; Enable multi-line commenting which ensures that `comment-indent-new-line'
  ;; properly continues comments onto new lines, which is useful for writing
  ;; longer comments or docstrings that span multiple lines.
  (setq comment-multi-line t)

  ;; We often split terminals and editor windows or place them side-by-side,
  ;; making use of the additional horizontal space.
  (setq-default fill-column 80)

  ;; Disable the obsolete practice of end-of-line spacing from the
  ;; typewriter era.
  (setq sentence-end-double-space nil)

  ;; According to the POSIX, a line is defined as "a sequence of zero or
  ;; more non-newline characters followed by a terminating newline".
  (setq require-final-newline t)

  ;; Remove duplicates from the kill ring to reduce clutter
  (setq kill-do-not-save-duplicates t)

  ;; Ensures that empty lines within the commented region are also commented out.
  ;; This prevents unintended visual gaps and maintains a consistent appearance,
  ;; ensuring that comments apply uniformly to all lines, including those that are
  ;; otherwise empty.
  (setq comment-empty-lines t)

  ;; Eliminate delay before highlighting search matches
  (setq lazy-highlight-initial-delay 0)
#+end_src

*** Completion
#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq completion-auto-help t)
#+end_src
*** Remove dired buffers or those surrounded by * from cycling
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'buffer-predicate
                       (lambda (buf) 
                         (let ((name (buffer-name buf)))
                           (not (or (string-prefix-p "*" name)
                                    (eq 'dired-mode (buffer-local-value 'major-mode buf)))))))
#+end_src
*** Trust custom themes
To avoid to always trust the custom themes
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

*** Emacs started in terminal mode
#+begin_src emacs-lisp
  (unless (display-graphic-p)
        (xterm-mouse-mode))

  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?â”‚))
#+end_src

*** Hightlight current line
#+begin_src emacs-lisp :tangle "init.el"
  (if (display-graphic-p)
      (global-hl-line-mode))
#+end_src

*** Line numbering
Highlight the current line.
Also display the relative line number except for the specified modes. There are two
strategies for that: globally activate the lines numbering and disable it when
not desired or enable it for all the mode in which is usefull (i.e.
prog-mode-hook). At the moment i prefer the last one so the first is commented
in the code below.

#+begin_src emacs-lisp :tangle "init.el"
  (setq display-line-numbers-type 'relative)
  ;; 1. global strategy

  ;; (global-display-line-numbers-mode)
  ;; (dolist (mode '(
  ;;                 ;; base mode
  ;;                 ;; outline files
  ;;                 org-mode-hook
  ;;                 markdown-mode-hook
  ;;                 latex-mode-hook
  ;;                 ;; manuals
  ;;                 Info-mode-hook
  ;;                 ;; shell buffers
  ;;                 term-mode-hook
  ;;                 vterm-mode-hook
  ;;                 shell-mode-hook
  ;;                 eshell-mode-hook
  ;;                 ;; explorers
  ;;                 dired-mode-hook
  ;;                 treemacs-mode-hook
  ;;                 eww-mode-hook
  ;;                 ))
  ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; 2. selective strategy

  (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1)))
#+end_src

** Minibuffer
#+begin_src emacs-lisp
  ;; Allow nested minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Keep the cursor out of the read-only portions of the.minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src
** Modeline
#+begin_src emacs-lisp
  ;; Setting `display-time-default-load-average' to nil makes Emacs omit the load
  ;; average information from the mode line.
  (setq display-time-default-load-average nil)

  ;; Display the current line and column numbers in the mode line
  (setq line-number-mode t)
  (setq column-number-mode t)
#+end_src

** Filetype
#+begin_src emacs-lisp
  ;; Do not notify the user each time Python tries to guess the indentation offset
  (setq python-indent-guess-indent-offset-verbose nil)
#+end_src

** Font / Text scale
#+begin_src emacs-lisp
  ;; Avoid automatic frame resizing when adjusting settings.
  (setq global-text-scale-adjust-resizes-frames nil)
#+end_src

** Custom file
#+begin_src emacs-lisp 
  (lm-emacs-load-user-init custom-file)
#+end_src
* Modules load section (still in init.el)
Here i load all the activated modules. I have to remember to add the appropriate
section for each module i insert.
As a rule, mutually exclusive packages (like different completion framework)
must in last instance be called in the same module (i.e. completion) and be
activated by the same custom variable.

#+begin_src emacs-lisp
  ;; buildin packages
  (require 'lm-dired)
  (require 'lm-eshell)
  (require 'lm-grep)
  (require 'lm-org)

  ;; input mode
  (cond
   ((eq lm-input-mode 'evil) (require 'lm-evil)))

  (cond
   ((eq lm-key-clues 'which-key) (require 'lm-which-key)))

  ;; completion
  (if (eq lm-capf-cape 'on) (require 'lm-cape))
  (require 'lm-completion)

  ;; terminal
  (cond
   ((eq lm-terminal-emulator 'eat) (require 'lm-eat)))

  ;; lsp
  (require 'lm-lsp)
#+end_src

* Modules
** Grep
use ripgrep as grep-find command
#+begin_src emacs-lisp :tangle "lm-modules/lm-grep.el"
  (use-package grep
    :defer t
    :config
    (grep-apply-setting
     'grep-find-command
     '("rg -n -H --no-heading -e  ." . 26)))
  (provide 'lm-grep)
#+end_src
** Dired
#+begin_src emacs-lisp :tangle "lm-modules/lm-dired.el"
  (use-package dired
    :hook (dired-mode . dired-hide-details-mode)
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (let ((bg (face-attribute 'default :background))
          (fg (face-attribute 'default :foreground))
          (dir (face-attribute 'dired-directory :foreground))
          (file (face-attribute 'default :foreground))
          (symlink (face-attribute 'dired-symlink :foreground))
          (suffix (face-attribute 'default :foreground)))
      (custom-set-faces
       `(dired-directory ((t (:foreground ,dir :weight bold))))
       `(dired-file-name ((t (:foreground ,file))))
       `(dired-symlink ((t (:foreground ,symlink))))
       `(dired-suffix ((t (:foreground ,suffix))))))
    (setq dired-dwim-target t))

  (provide 'lm-dired)
#+end_src
** Eshell
#+begin_src emacs-lisp :tangle "lm-modules/lm-eshell.el"
  (add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))
  (provide 'lm-eshell)
#+end_src
** Org-mode
#+begin_src emacs-lisp :tangle "lm-modules/lm-org.el"

  (provide 'lm-org)
#+end_src
** evil-mode
#+begin_src emacs-lisp :tangle "lm-modules/lm-evil.el"
    (defun lm-evil-personal-keymaps ()
      ;; ----------------------------- LEADER KEYMAPS ------------------------------
      (keymap-set evil-normal-state-map "SPC" lm/leader-map)
      (keymap-set evil-motion-state-map "SPC" lm/leader-map)
      (keymap-set lm/leader-map "SPC" 'execute-extended-command)
      (defvar lm/leader-map-buffer (make-sparse-keymap)
        "sub-keymap for buffer operations")
      (keymap-set lm/leader-map "b" `("+Buffer" . ,lm/leader-map-buffer))
      (keymap-set lm/leader-map-buffer "d" 'kill-this-buffer)
      (keymap-set lm/leader-map-buffer "s" 'save-buffer)
      (keymap-set lm/leader-map-buffer "l" 'switch-to-buffer)
      (keymap-set lm/leader-map-buffer "L" 'list-buffers)
      (defvar lm/leader-map-quit (make-sparse-keymap)
        "sub-keymap for quit operations")
      (keymap-set lm/leader-map "q" `("+Quit" . ,lm/leader-map-quit))
      (keymap-set lm/leader-map-quit "q" 'save-buffers-kill-terminal)
      (defvar lm/leader-map-find (make-sparse-keymap)
        "sub-keymap for finding operations")
      (keymap-set lm/leader-map "f" `("+Find" . ,lm/leader-map-find))
      (keymap-set lm/leader-map-find "f" 'project-find-file)
      (keymap-set lm/leader-map-find "s" 'evil-search-forward)
      (keymap-set lm/leader-map-find "b" 'evil-search-backward)
      (keymap-set lm/leader-map-find "r" 'query-replace)
      (defvar lm/leader-map-appearence (make-sparse-keymap)
        "sub-keymap for customizing appearence operations")
      (keymap-set lm/leader-map "a" `("+Appearence" . ,lm/leader-map-appearence))
      (keymap-set lm/leader-map-appearence "c" 'customize-themes)
      (keymap-set lm/leader-map-appearence "t" 'toggle-theme)
      (keymap-set lm/leader-map-appearence "m" 'menu-bar-mode)
      (defvar lm/leader-map-config (make-sparse-keymap)
        "sub-keymap for customizing configuration operations")
      (keymap-set lm/leader-map "c" `("+Configuration" . ,lm/leader-map-config))
      (keymap-set lm/leader-map-config "c" 'lm-open-literate-config)
      (keymap-set lm/leader-map-config "p" 'lm-open-post-init)
      (keymap-set lm/leader-map-config "r" 'lm-reload-config)
      (defvar lm/leader-map-project (make-sparse-keymap)
        "sub-keymap for customizing project operations")
      (keymap-set lm/leader-map "p" `("+Project" . ,lm/leader-map-project))
      (keymap-set lm/leader-map-project "p" 'project-asyn-shell-command)
      (defvar lm/leader-map-special-chars (make-sparse-keymap)
        "sub-keymap for inserting special characters")
      (keymap-set lm/leader-map "i" `("+Insert" . ,lm/leader-map-special-chars))
      (keymap-set lm/leader-map-special-chars "t" 'lm-action-insert-tilde)
      (keymap-set lm/leader-map-special-chars "g" 'lm-action-insert-grave-accent)
      (defvar lm/leader-map-tools (make-sparse-keymap)
        "sub-keymap for tools")
      (keymap-set lm/leader-map "t" `("+Tools" . ,lm/leader-map-tools))
      (keymap-set lm/leader-map-tools "p" 'lm/pomodoro)
      ;; ------------------------- NORMAL STATE KEYMAPS ----------------------------
      (keymap-set evil-normal-state-map "H" 'previous-buffer)
      (keymap-set evil-normal-state-map "L" 'next-buffer)
      (keymap-set evil-normal-state-map "U" 'undo-redo)
      (keymap-set evil-normal-state-map "C-w C-h" 'evil-window-left)
      (keymap-set evil-normal-state-map "C-w C-l" 'evil-window-right)
      (keymap-set evil-normal-state-map "C-w C-j" 'evil-window-down)
      (keymap-set evil-normal-state-map "C-w C-k" 'evil-window-up)
      ;; (define-key evil-normal-state-map (kbd "TAB") 'evil-indent-line)
      ;; ------------------------- VISUAL STATE KEYMAPS ----------------------------
      ;; ------------------------- INSERT STATE KEYMAPS ----------------------------
      (keymap-set evil-insert-state-map "C-g" 'evil-normal-state)
      (keymap-set evil-insert-state-map "C-SPC" 'lm-action-complete)
      (defvar lm/insert-map (make-sparse-keymap)
        "Keymap for shortcuts in insert mode")
      (keymap-set evil-insert-state-map "C-c" lm/insert-map)
      (defvar lm/insert-map-special-chars (make-sparse-keymap)
        "sub-keymap for inserting special characters")
      (keymap-set lm/insert-map "s" `("+Special" . ,lm/insert-map-special-chars))
      (keymap-set lm/insert-map-special-chars "t" 'lm-action-insert-tilde)
      (keymap-set lm/insert-map-special-chars "g" 'lm-action-insert-grave-accent)
      ;; ----------------------------- GLOBAL KEYMAPS ------------------------------
      (keymap-set global-map "C-s" 'save-buffer)
      (keymap-set global-map "M-1" 'lm-action-switch-to-tab-1)
      (keymap-set global-map "M-2" 'lm-action-switch-to-tab-2)
      (keymap-set global-map "M-3" 'lm-action-switch-to-tab-3)
      (unless (display-graphic-p)
        (keymap-set evil-insert-state-map "C-_" 'lm/complete))
      ;; ---------------------------------------------------------------------------
      )

    (use-package evil
      :ensure t
      :defer 1
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (unless (display-graphic-p) (setq evil-want-C-i-jump nil))
      (setq evil-undo-system 'undo-redo)
      (defvar lm/leader-map (make-sparse-keymap)
        "Keymap for \"leader key\" shortcuts")
      :config
      ;; change cursor form in terminal
      (unless (display-graphic-p)
        (add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q")))
        (add-hook 'evil-insert-state-exit-hook  (lambda () (send-string-to-terminal "\033[2 q"))))

      (evil-mode))

    (use-package evil-collection
      :ensure t
      :after evil
      :custom (evil-collection-want-unimpaired-p nil)
      :init
      (setq evil-collection-key-blacklist '("SPC"))
      :config
      (evil-collection-init)
      (lm-evil-personal-keymaps))

    (provide 'lm-evil)
#+end_src
** which-key
Which-key permits to display chords in a window at the bottom of the
application when starting the sequence
#+begin_src emacs-lisp :tangle "lm-modules/lm-which-key.el"
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.1)
    (which-key-setup-minibuffer))

  (provide 'lm-which-key)
#+end_src
** eat
To make eat works on Windows change those functions in eat.el
- eat--build-command before eat-exec function

#+begin_example emacs-lisp 
;; (defun eat--build-command(command switches width height)
;;   "Build command to be executed with args.
;; 
;; COMMAND is going to be run with SWITCHES.  WIDTH and HEIGHT are
;; terminal dimensions."
;;   (cond
;;    ((eq system-type 'windows-nt)
;;     `("conhost.exe" "--headless" "--height" ,(number-to-string height)
;;       "--width" ,(number-to-string width) "--feature" "pty" ,command
;;       ,@switches))
;;    (t
;;     `("/usr/bin/env" "sh" "-c"
;;       ,(format "stty -nl echo rows %d columns \
;;   %d sane 2>%s ; if [ $1 = .. ]; then shift; fi; exec \"$@\""
;;                height
;;                width
;;                null-device)
;;       ".."
;;       ,command
;;       ,@switches))))
#+end_example

- modify the eat-exec function
#+begin_example
;; -               :command `("/usr/bin/env" "sh" "-c"
;; -                          ,(format "stty -nl echo rows %d columns \
;; - %d sane 2>%s ; if [ $1 = .. ]; then shift; fi; exec \"$@\""
;; -                                   (cdr size) (car size)
;; -                                   null-device)
;; -                          ".."
;; -                          ,command ,@switches)
;; +               :command (eat--build-command command switches
;; +                                            (car size) (cdr size))
#+end_example
#+begin_example
;; -  (let ((program (or program (funcall eat-default-shell-function)))
;; -        (buffer
;; -         (cond
;; -          ((numberp arg)
;; -           (get-buffer-create (format "%s<%d>" eat-buffer-name arg)))
;; -          (arg
;; -           (generate-new-buffer eat-buffer-name))
;; -          (t
;; -           (get-buffer-create eat-buffer-name)))))
;; +  (let* ((program (or program (eat-default-shell)))
;; +         (args
;; +          (cond
;; +           ((eq system-type 'windows-nt)
;; +            `("powershell.exe" nil ("-NoExit" "-c" ,(format "%s" program))))
;; +           (t
;; +            `("/usr/bin/env" nil (list "sh" "-c" ,program)))))
;; +         (buffer
;; +          (cond
;; +           ((numberp arg)
;; +            (get-buffer-create (format "%s<%d>" eat-buffer-name arg)))
;; +           (arg
;; +            (generate-new-buffer eat-buffer-name))
;; +           (t
;; +            (get-buffer-create eat-buffer-name)))))
#+end_example
#+begin_example
;; -        (eat-exec buffer (buffer-name) "/usr/bin/env" nil
;; -                  (list "sh" "-c" program)))
;; +        (apply #'eat-exec buffer (buffer-name) args))
#+end_example

#+begin_src emacs-lisp :tangle "lm-modules/lm-eat.el"
  (use-package eat
    :ensure t
    :config
    (defun eat-default-shell () "pwsh")
    (setq eat-default-shell-function '(lambda () "pwsh")))

  (provide 'lm-eat)
#+end_src
** Themes
*** Doom-themes
#+begin_src emacs-lisp :tangle "lm-modules/lm-doom-themes.el"
  (use-package doom-themes
    :config
    (setq modus-themes-headings
          '((1 . (variable-pitch light 1.4))))
    )

  (use-package nerd-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)))

  (provide 'lm-doom-themes)
#+end_src
** lsp
#+begin_src emacs-lisp :tangle "lm-modules/lm-lsp.el"
  (cond
   ((eq lm-lsp-client 'lsp-mode) (require 'lm-lsp-mode))
   ((eq lm-lsp-client 'eglot) (require 'lm-eglot))
   (t nil))

  (provide 'lm-lsp)
#+end_src

*** lsp-mode
#+begin_src emacs-lisp :tangle "lm-modules/lm-lsp-mode.el"
  (if (eq lm-lsp-client 'lsp-mode)
      (progn
        (defun lm/lsp-mode-setup ()
          (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
          (lsp-headerline-breadcrumb-mode))

        (setenv "LSP_USE_PLISTS" "true")
        (setq lsp-use-plists t)
        (use-package lsp-mode
          :ensure t
          :config
          (lsp-enable-which-key-integration t)
          (setq lsp-idle-delay 0.100)
          (setq lsp-auto-execute-action nil)

          ;; ----------------------------- LSP KEYMAPS -------------------------------
          (if (eq lm-input-mode 'evil)
              (progn
                (defvar lm/leader-map-lsp (make-sparse-keymap)
                  "sub-keymap for lsp operations")
                (keymap-set lm/leader-map "l" `("+lsp" . ,lm/leader-map-lsp))
                (keymap-set lm/leader-map-lsp "f" 'lsp-format-buffer)
                (defvar lm/leader-map-lsp-go-to (make-sparse-keymap)
                  "sub-keymap for lsp go to operations")
                (keymap-set lm/leader-map-lsp "g" `("+Go to" . ,lm/leader-map-lsp-go-to))
                (keymap-set lm/leader-map-lsp-go-to "d" 'lsp-find-definition)
                (keymap-set lm/leader-map-lsp-go-to "D" 'lsp-find-declaration)
                (keymap-set lm/leader-map-lsp-go-to "i" 'lsp-find-implementation)
                (keymap-set lm/leader-map-lsp-go-to "r" 'lsp-find-references)
                (defvar lm/leader-map-lsp-diagnostics (make-sparse-keymap)
                  "sub-keymap for lsp diagnostics operations")
                (keymap-set lm/leader-map-lsp "d" `("+Diagnostics" . ,lm/leader-map-lsp-diagnostics))
                (keymap-set lm/leader-map-lsp-diagnostics "l" 'flymake-show-project-diagnostics)
                (keymap-set lm/leader-map-lsp-diagnostics "n" 'flymake-goto-next-error)
                (keymap-set lm/leader-map-lsp-diagnostics "p" 'flymake-goto-prev-error)))

          ;; -------------------------- LSP REMOTE CONNECTIONS -----------------------
                                          ; (lsp-register-client
                                          ;  (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
                                          ;                   :major-modes '(c-mode c++-mode)
                                          ;                   :remote? t
                                          ;                   :server-id 'clangd-remote))
          )

        (use-package lsp-ui
          :ensure t
          :after lsp-mode
          :hook (lsp-mode . lsp-ui-mode)
          :custom
          (lsp-ui-doc-position 'bottom))))

  (provide 'lm-lsp-mode)
#+end_src
*** eglot
#+begin_src emacs-lisp :tangle "lm-modules/lm-eglot.el"
  (use-package eglot
    :ensure t
    :defer t
    :pin elpa-devel
    :init
    (setq eglot-events-buffer-config 0)
    (setq eglot-connect-timeout 90))

  (provide 'lm-eglot)
#+end_src
** completion
#+begin_src emacs-lisp :tangle "lm-modules/lm-completion.el"
  (cond
   ((eq lm-in-buffer-completion 'company)
    (require 'lm-company))

   ((eq lm-in-buffer-completion 'builtin)
    (progn
      (setq
       ;; TODO hints dabbrev-complete (f), completion-at-point-functions (v)
       ;; check the customize page for capf
       )
      (defun lm-action-complete ()
        (interactive)
        (completion-at-point))))
   )

  (provide 'lm-completion)
#+end_src

*** cape
#+begin_src emacs-lisp :tangle "lm-modules/lm-cape.el"
  (use-package cape
    :ensure t
    :defer nil
    :bind (("C-<SPC>" . 'completion-at-point))
    :init
    (setq completion-ignore-case t)
    (add-to-list 'completion-at-point-functions 'cape-dabbrev)
    (add-to-list 'completion-at-point-functions 'cape-file)) 

  (provide 'lm-cape)
#+end_src
*** company
#+begin_src emacs-lisp :tangle "lm-modules/lm-company.el"
  (if (eq lm-in-buffer-completion 'company)
      (use-package company
        :ensure t
        :diminish
        :defer 1
        :init
        (defun lm-action-complete ()
          (interactive)
          (company-complete))
        (setq company-dabbrev-ignore-case t)
        (setq company-dabbrev-code-ignore-case t)    
        (setq company-keywords-ignore-case t)
        (setq company-minimum-prefix-length 1)
        (setq company-idle-delay 0.3)
        :config
        ;; (add-to-list 'company-backends '(company-capf :with company-dabbrev))
        (defun lm/company-format-margin (candidate selected)
          "Format the margin with the backend name."
          (let ((backend (company-call-backend 'annotation candidate)))
            (if backend
                (format " [%s]" backend)
              "")))
        (setq company-format-margin-function 'lm/company-format-margin)

        (global-company-mode t)))

  (provide 'lm-company)
#+end_src
*** COMMENT corfu
#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package corfu
    :ensure t
    :defer 1
    :init
    (setq corfu-auto t
          corfu-auto-delay 0.3
          corfu-preview-current nil
          corfu-quit-no-match 'separator
          completion-styles '(basic ))
    :config
    (global-corfu-mode))

  (unless (display-graphic-p)
    (use-package corfu-terminal
      :init
      (custom-set-faces
       '(corfu-default ((t (:background "black")))))
      :config
      (corfu-terminal-mode)))
#+end_src
*** COMMENT only built-in
#+begin_src emacs-lisp :tangle "post-init.el"
  ;; (setq completions-format 'one-column)
  (setq completions-header-format nil)
  (setq completions-max-height 20)
  (setq completion-auto-select nil)
  (define-key minibuffer-mode-map (kbd "C-n") 'minibuffer-next-completion)
  (define-key minibuffer-mode-map (kbd "C-p") 'minibuffer-previous-completion)

  (defun my/minibuffer-choose-completion (&optional no-exit no-quit)
    (interactive "P")
    (with-minibuffer-completions-window
      (let ((completion-use-base-affixes nil))
        (choose-completion nil no-exit no-quit))))

  :bind (("C-<SPC>" . 'completion-at-point))
  (define-key completion-in-region-mode-map (kbd "M-RET") 'my/minibuffer-choose-completion)
#+end_src

** COMMENT Snippets (to convert as module)
*** yasnippet
#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package yasnippet
    :ensure t
    :defer 2
    :config
    (yas-minor-mode)
    (cond
     ((eq lm-in-buffer-completion 'company)
      (progn
        ;; (add-to-list 'company-backends 'company-yasnippet)
        (global-set-key (kbd "C-c y") 'company-yasnippet)
        ))))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src

** COMMENT olivetti (to convert as module)
This is a nice package for zen mode editing
#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package olivetti
    :ensure t
    :defer 1
    :init
    (lm/leader-keys
     :keymaps 'override
     :states 'normal
     "ao" '(olivetti-mode :which-key "olivetti mode"))
    :config
    (add-hook 'olivetti-mode-hook (lambda ()
                                    (display-line-numbers-mode 0)
                                    (display-fill-column-indicator-mode 0))))
#+end_src
* Post-init.el
The /post-init.el/ is file is where should be located the machine
dependent customization done after the main initialization has been
done. This file is not updated in the git repository.

#+begin_src emacs-lisp
  (lm-emacs-load-user-init "post-init.el")
#+end_src

* Programming languages
*** C/C++
**** Windows clangd with MSys2/Mingw-w64
On Windows, when using MSys2-Mingw-64 to compile and clangd as LSP a per project
configuration file named /.clangd/ or a global one named
/~\AppData\Local\clangd\config.yaml/ is required. 
The content of the file must be

#+begin_src dot
  CompileFlags:
  Add: [-target, x86_64-pc-windows-gnu]
#+end_src
**** cmake
#+begin_src emacs-lisp :tangle "lm-languages/cmake.el"
  (use-package cmake-mode
    :ensure t
    :mode ("\\CMakeLists.txt" . cmake-mode))
  (provide 'lm-cmake)
#+end_src

*** Arduino
#+begin_src emacs-lisp :tangle "lm-languages/lm-arduino.el"
  (add-to-list 'auto-mode-alist '("\\.ino\\'" .
                                  (lambda ()
                                    (c-or-c++-mode)
                                    (setq lsp-clients-clangd-args
                                          `(
                                            "-j=2"
                                            "--background-index"
                                            "--clang-tidy"
                                            "--completion-style=detailed"
                                            (concat "--query-driver=" (getenv-internal "HOME") "/.platformio/packages/toolchain-atmelavr/bin/avr-g++"))))))
  (provide 'lm-arduino)
#+end_src
*** Rust
This will activate the rust treesitter mode for rust files. However it could be necessary to install the treesitter library for rust.
With emacs 29+ it can be done with *M-x treesit-install-language-grammar rust* that will download and compile the needed library.
#+begin_src emacs-lisp :tangle "lm-languages/lm-rust.el"
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (provide 'lm-rust)
#+end_src
*** COMMENT Powershell
#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package powershell    
    :ensure t
    :defer t
    :init
    (setq compile-command "pwsh -c ./project.ps1 ")
    :commands powershell)

  (use-package ob-powershell
    :ensure t
    :after org)
#+end_src

*** COMMENT MATLAB
#+begin_src emacs-lisp :tangle "post-init.el"
  (use-package matlab-mode
    :ensure t
    :defer t
    :mode ("\\.m\\'" . matlab-mode))
#+end_src
