#+title: My emacs configuration without the evil mode
#+author: Mascelli Leonardo
#+property: header-args:emacs-lisp :tangle (expand-file-name "init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes

* Setup
This is needed to avoid confirming every single block of this file
when it's being tangled into the actual /init.el/
#+begin_src emacs-lisp
    (setq org-confirm-babel-evaluate nil)
#+end_src
* User defined stuff
** My global variables
*** Machine dependent variables
Adjust those variables depending on the machine where emacs runs.
Maybe this section will be changed to load an external file
#+begin_src emacs-lisp
  (setq lm/pylsp-path "~/.local/.lsp/bin/pylsp")
  (setq lm/pses-path "/home/leonardo/Downloads/pses")
  (setq lm/pses-log-path "/home/leonardo/tmp")
#+end_src
*** Configuration files
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (setq lm/conf-org-dir lm/this-buffer-path)
  (setq lm/dot-dir (file-name-directory (directory-file-name lm/conf-org-dir)))
  (setq lm/sound-dir (concat lm/dot-dir "sounds/"))
#+end_src

*** Active packages
#+begin_src emacs-lisp
  (setq lm/evil-mode nil)
#+end_src
** My functions
*** Wezterm
Often i use wezterm as terminal choise
https://wezfurlong.org/wezterm/installation.html
because emacs, expecially on windows does not provide a good terminal mode. So
i need a way to easily call wezterm and open it in the current directory.

#+begin_src emacs-lisp
  (defun lm/run-wezterm ()
    (interactive)
    (start-process "wezterm" nil "wezterm" "start" "--cwd"
		   default-directory))
#+end_src
*** Inserting special characters for italian keyboard
Tilde and grave accent are not present in italian keyboard but often used in
programming so this function are a quick way to insert them in text

#+begin_src emacs-lisp
  (defun lm/insert-tilde ()                                      
    (interactive)                                 
    (insert-char (char-from-name "TILDE")))
  (defun lm/insert-grave-accent ()                                      
    (interactive)                                 
    (insert-char (char-from-name "GRAVE ACCENT")))
#+end_src
This function returns the directory containing this org file in case it differs
from the actual emacs config dir
#+begin_src emacs-lisp
  (defun lm/get-conf-org-dir ()
    (interactive)
    (file-name-directory buffer-file-name))
#+end_src

*** Open literate config
#+begin_src emacs-lisp
  (defun lm/open-literate-config ()
    (interactive)
    (find-file (concat lm/conf-org-dir "init.org")))
#+end_src
*** Reload configuration
#+begin_src emacs-lisp
  (defun lm/reload-config ()
    (interactive)
    (load (concat user-emacs-directory "init.el")))
#+end_src
*** pomodoro
#+begin_src emacs-lisp
  (defun lm/pomodoro ()
    (interactive)
    (require 'org-element)
    (setq org-clock-sound (concat lm/sound-dir "bell.wav"))
    (unless (boundp 'lm/pomodoro-state)
      (setq lm/pomodoro-state 0))
    (let ((time-work "00:25:00")
	  (time-pause "00:05:00"))
      (org-timer-set-timer
       (cond
	((= (mod lm/pomodoro-state 2) 0) time-work)
	((= (mod lm/pomodoro-state 3) 0) time-work)
	(t time-pause)))
      (setq lm/pomodoro-state (+ lm/pomodoro-state 1))))
#+end_src						

* Early init
** Gui widgets
On the early init is useful to disable unnecessary gui components to
avoid drawing them at all. The scroll-bar is still present in newer
frames at this point. To remove it also in them it must be changed the
/default-frame-alist/ but since this variable is reset in the
*geometry and aspect* section this change is applied there.
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (unless (display-graphic-p)
    (setq ring-bell-function 'ignore))
#+end_src
** Startup
During startup is useful to increase the garbage collector memory size
because it's originally 1 Mb and this could heavily slow the startup
process and the runtime execution, anyway it should be reset to an
intermediate value or it will freeze after long time use.
Most of those tweaks were made following the Doom emacs strategy of lazy loading
[[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][link]]

#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq gc-cons-threshold (* 50 1000 1000) ;; 50 Mb
		    gc-cons-percentage 0.1 )))
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs loaded in %s with %d garbage collections."
		       (emacs-init-time) gcs-done)))
#+end_src

When installing a new package there are often lots of warnings due to native
compilation that i cannot do nothing about so i decided to silence them.
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (setq comp-async-report-warnings-errors nil)
#+end_src

#+end_src

* Editor behaviour
** load-path 
Add the lisp folder of org configuration directory to the load-path
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat lm/conf-org-dir "lisp/"))
#+end_src
** geometry and font
Those are settings relative to:
- transparency: /alpha/
- window size at start: /width/ and /height/
- font: /font/
- avoid the vertical scroll bar on new frames: /vertical-scroll-bar/

#+begin_src emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 100)
  (setq default-frame-alist '((width . 90)
			      (height . 40)
			      (alpha . (100 . 100))))

  ;; (defvar lm/font
  ;;   (cond
  ;;    ((string-equal system-type "gnu/linux") "JetBrains Mono Nerd Font-10")
  ;;    ((string-equal system-type "windows-nt") "JetBrains Mono-10")))
  ;; (setf (alist-get 'font default-frame-alist) lm/font)

  ;; disable scroll-bar even in new frames
  (add-to-list 'default-frame-alist
	       '(vertical-scroll-bars . nil))
#+end_src

** tab width
Set the default width of tab to 2

#+begin_src emacs-lisp
  (setq tab-width 2)
#+end_src

** tab-always-indent
Set the behaviour of tab so that it first try to indent the line, if the line is
already indented then it does the selected action
#+begin_src emacs-lisp
  (setq tab-always-intent 'complete)
#+end_src
** encoding system
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
** process buffer
increase the amount of data that emacs can read from processes; default is 4 kb

#+begin_src emacs-lisp
  (setq read-process-output-max (* 10 1024 1024)) ;; 10 Mb
#+end_src

** autosaving
disable backup of files by default
change the defaults directory where to store ~ , # and .# files, respectively
backup and autosaves and lockfiles.

#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  ;; autosaves files in one common directory
  ;; (setq backup-directory-alist  `(("." . ,(if lm/autosave_dir lm/autosave_dir (concat user-emacs-directory "backups")))))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,lm/autosave_dir t)))
#+end_src

** buffer scrolling
#+begin_src emacs-lisp
  ;; (setq scroll-margin 5)
  (setq redisplay-dont-pause t)
  (setq scroll-conservatively scroll-margin)
  ;; (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position t)
  (setq mouse-wheel-follow-mouse 't)
  ;; (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq scroll-step 1)
  (setq auto-window-vscroll nil)
  (setq scroll-error-top-bottom t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-inhibit-click-time nil)
  ;; (setq fast-but-imprecise-scrolling t)
#+end_src
*** COMMENT pixel-scroll-precision-mode
#+begin_src emacs-lisp
  (unless (version< emacs-version "29")
    (progn
      ;; (setq pixel-scroll-precision-use-momentum t)
      (setq pixel-scroll-precision-interpolate-mice t)
      (setq pixel-scroll-precision-interpolate-page t)
      (setq pixel-scroll-precision-large-scroll-height 20.0)
      (pixel-scroll-precision-mode)))
#+end_src

** auto revert mode
automatically refresh the buffer when the correspondig file has been changed
externally

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** automatic pairs mode
automatically insert the pair of some symbols like braces, parenthesis, etc...

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** noises messages
disable:
- the startup screen,
- the prompt for killing buffer
and ask just for (y/n) instead of complete yes and no

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)                              ;; no startup screen
  (setq message-kill-buffer-query nil)                          ;; no prompt kill buffer
  (setq use-short-answers t)
#+end_src

** prefer newer editor files
this is expecially useful for loading the changes to term.el in Windows for
running powershell in term and ansi-term
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

** native compilation
#+begin_src emacs-lisp
  (setq native-compile-always-compile t
	;; package-native-compile t
	)
#+end_src

** row numbers, highlight current line and column 80
#+begin_src emacs-lisp
  (column-number-mode)

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  vterm-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  latex-mode-hook
		  treemacs-mode-hook
		  eww-mode-hook
		  ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq-default fill-column 80)
  (global-display-fill-column-indicator-mode)
  (dolist (mode '(term-mode-hook
		  vterm-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
		  latex-mode-hook))
    (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

  (if (display-graphic-p)
      (global-hl-line-mode))
#+end_src

#+RESULTS:
: t

** mouse right click
Enable the context menu with the right click of the mouse
#+begin_src emacs-lisp
  (context-menu-mode)
#+end_src

** remove dired buffers or those surrounded by * from cycling
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'buffer-predicate
                     (lambda (buf) 
                       (let ((name (buffer-name buf)))
                         (not (or (string-prefix-p "*" name)
                                  (eq 'dired-mode (buffer-local-value 'major-mode buf)))))))
#+end_src
** fido
#+begin_src emacs-lisp
  (fido-vertical-mode t)
#+end_src


* Repositories
Setup the melpa repository and refresh the contents of package-archives to be
prepared for plugins installation.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
* use-package
/use-package/ is a nice and useful package manager

- the /use-package-always-ensure/ variable means that package not
  already present will be downloaded
- the /use-package-compute-statistics/ enable to profile the startup time of
  installed packages via the *use-package-profile* command.
- diminish is used to hide some mode from mode bar
  
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+end_src

** diminish
*diminish* enable to hide minor-mode names from minibuffer.  To hide a
minor-mode put `:diminish` in the use-package configuration of the
mode package
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
