#+title: My Emacs Configuration
#+property: header-args:emacs-lisp :tangle (expand-file-name "init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes

#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
#+end_src

* Intro
This is my emacs configuration. It's a mess.
Some of the configurations here are taken by the "minimal-emacs.d" configuration
of jamescherti https://github.com/jamescherti/minimal-emacs.d

* Setup
Evaluate this line before tangling the whole file to avoid being
asked if confirm every code block
#+begin_src emacs-lisp :tangle nil
  (setq org-confirm-babel-evaluate nil)
#+end_src
** ways to swap CTRL and CAPS-LOCK
*** Windows

to activate run this script as a .reg file
#+begin_src
REGEDIT4

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=hex:00,00,00,00,00,00,00,00,03,00,00,00,1d,00,3a,00,3a,00,1d,00,00,00,00,00
#+end_src

and run that as a .reg file to deactivate it

#+begin_src 
REGEDIT4
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
"Scancode Map"=-
#+end_src

*** Linux
On Linux, using the X Windows Server it just need to run or put it in the init
script.

#+begin_src shell
  setxkbmap -option ctrl:swapcaps
#+end_src

** Linux
*** start server at startup script
Copy this to *"~/.config/systemd/user/emacs.service"*
#+begin_src shell
  [Unit]
  Description=Emacs text editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon
  ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+end_src
and the enable the service with
#+begin_src shell
  systemctl enable --user emacs
  systemctl start --user emacs
#+end_src

** Windows
*** start server at startup script
#+begin_src shell
  # Path to startup file
  $startup_file = "$([Environment]::GetFolderPath('Startup'))\StartEmacsServer.bat"

  # Introduce variable HOME:
  # 1. for simplicity
  # 2. runemacs.exe expects it to be
  #
  # %APPDATA% is chosen because runemacs.exe operates there
  #	https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init
  #	https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables
  New-Item $startup_file -type file
  Set-Content -Path $startup_file -Value "set HOME=%APPDATA%"

  # Clean previous server file info first
  Add-Content -Path $startup_file -Value "del /Q ""%HOME%/.emacs.d/server/*"""
  Add-Content -Path $startup_file -Value "runemacs.exe --daemon"
#+end_src

*** install from scoop
The best way i found to install emacs on windows is via *scoop* and create a
script on *$USERPATH/Roaming/Microsoft/Windows/Start Menu/Programs/Startup* that
starts the emacs server automatically at the startup.

#+begin_src shell
  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Optional: Needed to run a remote script the first time
  irm get.scoop.sh | iex
  scoop update *
  scoop buckets add kiennq-scoop
  scoop install emacs-k
#+end_src

*** build from source
- install msys2
- run this script
#+begin_src shell
  git clone https://github.com/emacs-mirror/emacs emacs-master  
  cd emacs-master
  mingw64-bat
  pacman -S --needed \
         base-devel \
         autoconf \
         mingw-w64-x86_64-toolchain \
         mingw-w64-x86_64-xpm-nox \
         mingw-w64-x86_64-gmp \
         mingw-w64-x86_64-gnutls \
         mingw-w64-x86_64-libtiff \
         mingw-w64-x86_64-giflib \
         mingw-w64-x86_64-libpng \
         mingw-w64-x86_64-libjpeg-turbo \
         mingw-w64-x86_64-librsvg \
         mingw-w64-x86_64-libwebp \
         mingw-w64-x86_64-lcms2 \
         mingw-w64-x86_64-jansson \
         mingw-w64-x86_64-libxml2 \
         mingw-w64-x86_64-zlib \
         mingw-w64-x86_64-harfbuzz \
         mingw-w64-x86_64-libgccjit \
         mingw-w64-x86_64-sqlite3 \
         mingw-w64-x86_64-tree-sitter
  ./autogen.sh
  ./configure --with-native-compilation=yes --with-tree-sitter --without-dbus --with-json --with-wide-int
  make
  make install
#+end_src

*** find
Under windows when emacs looks for *find* command it found one, but the wrong
one. One solution is to use MSYS2's one. So go to the
<MSYS2 ROOT>/usr/bin/ and copy
msys-iconv-2.dll
msys-intl-8.dll
find.exe
to the emacs bin folder* COMMENT User defined stuff
* Early init
** Ui features
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (defvar lm-emacs-ui-features '(context-menu)
    "List of user interface features to disable in minimal Emacs setup.

      This variable holds a list Emacs UI features that can be enabled:
      - `context-menu`: Enables the context menu in graphical environments.
      - `tool-bar`: Enables the tool bar in graphical environments.
      - `menu-bar`: Enables the menu bar in graphical environments.
      - `dialogs`: Enables both file dialogs and dialog boxes.
      - `tooltips`: Enables tooltips.

      Each feature in the list corresponds to a specific UI component that can be
      turned on."
    )

  (defvar lm-emacs-frame-title-format "%b â€“ Emacs"
    "Template for displaying the title bar of visible and iconified frame.")
  (setq frame-title-format lm-emacs-frame-title-format
        icon-title-format lm-emacs-frame-title-format)

  ;; Disable startup screens and messages
  (setq inhibit-splash-screen t)

  ;; I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;; `scroll-bar-mode' because manipulating frame parameters can trigger or queue
  ;; a superfluous and potentially expensive frame redraw at startup, depending
  ;; on the window system. The variables must also be set to `nil' so users don't
  ;; have to call the functions twice to re-enable them.
  (unless (memq 'menu-bar lm-emacs-ui-features)
    (push '(menu-bar-lines . 0) default-frame-alist)
    (unless (memq window-system '(mac ns))
      (setq menu-bar-mode nil)))

  (unless (daemonp)
    (unless noninteractive
      ;; Temporarily override the tool-bar-setup function to prevent it from
      ;; running during the initial stages of startup
      (advice-add #'tool-bar-setup :override #'ignore)
      (define-advice startup--load-user-init-file
          (:before (&rest _) lm-emacs-setup-toolbar)
        (advice-remove #'tool-bar-setup #'ignore)
        (tool-bar-setup))))
  (unless (memq 'tool-bar lm-emacs-ui-features)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (setq tool-bar-mode nil))

  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq scroll-bar-mode nil)
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

  (unless (memq 'tooltips lm-emacs-ui-features)
    (when (bound-and-true-p tooltip-mode)
      (tooltip-mode -1)))

  ;; Disable GUIs because they are inconsistent across systems, desktop
  ;; environments, and themes, and they don't match the look of Emacs.
  (unless (memq 'dialogs lm-emacs-ui-features)
    (setq use-file-dialog nil)
    (setq use-dialog-box nil))

  ;; Allow for shorter responses: "y" for yes and "n" for no.
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add #'yes-or-no-p :override #'y-or-n-p))
  (defalias #'view-hello-file #'ignore)  ; Never show the hello file

  ;; Ensure that some built-in (e.g., org-mode) are always up to date
  (setq package-install-upgrade-built-in t)
#+end_src

** Package management
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  ;;; PACKAGES MANAGEMENT
  (defvar lm-emacs-package-initialize-and-refresh t
    "Whether to automatically initialize and refresh packages.
    When set to non-nil, Emacs will automatically call `package-initialize' and
    `package-refresh-contents' to set up and update the package system.")

  ;;; package.el
  (setq package-enable-at-startup nil)
  (setq package-quickstart nil)
  (setq use-package-always-ensure t)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (customize-set-variable 'package-archive-priorities '(("gnu"    . 99)
                                                        ("nongnu" . 80)
                                                        ("stable" . 70)
                                                        ("melpa"  . 0)))

#+end_src

** User files
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (defvar lm-emacs-user-directory user-emacs-directory
    "The default value of the `user-emacs-directory' variable.")

  (defun lm-emacs-load-user-init (filename)
    "Execute a file of Lisp code named FILENAME."
    (let ((user-init-file
           (expand-file-name filename
                             lm-emacs-user-directory)))
      (when (file-exists-p user-init-file)
        (load user-init-file nil t))))

  (lm-emacs-load-user-init "pre-early-init.el")

  (setq custom-theme-directory
        (expand-file-name "themes/" lm-emacs-user-directory))
  ;; Add the lisp folder of org configuration directory to the load-path
  (add-to-list 'load-path (concat lm-emacs-user-directory "lisp/"))
  (setq custom-file (expand-file-name "custom.el" lm-emacs-user-directory))
#+end_src

** Garbage collector and process memory
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
    ;;; increase garbage collector when load
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (defvar lm-emacs-gc-cons-threshold (* 16 1024 1024)
    "The value of `gc-cons-threshold' after Emacs startup.")

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold lm-emacs-gc-cons-threshold
                    gc-cons-percentage 0.1 )))

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  (setq read-process-output-max (* 512 1024))  ; 512kb

  ;; Prefer loading newer compiled files
  (setq load-prefer-newer t)

  (defvar lm-emacs-debug nil
    "Non-nil to enable debug.")

  ;; Reduce rendering/line scan work by not rendering cursors or regions in
  ;; non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; Disable warnings from the legacy advice API. They aren't useful.
  (setq ad-redefinition-action 'accept)

  (setq warning-suppress-types '((lexical-binding)))

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; By default, Emacs "updates" its ui more often than it needs to
  (setq idle-update-delay 1.0)

  ;; Font compacting can be very resource-intensive, especially when rendering
  ;; icon fonts on Windows. This will increase memory usage.
  (setq inhibit-compacting-font-caches t)

  (unless (daemonp)
    ;; (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
    ;;   (set-default-toplevel-value
    ;;    'file-name-handler-alist
    ;;    ;; Determine the state of bundled libraries using calc-loaddefs.el.
    ;;    ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
    ;;    ;; If compiled or neither, omit the gzip handler during startup for
    ;;    ;; improved startup and package load time.
    ;;    (if (eval-when-compile
    ;;          (locate-file-internal "calc-loaddefs.el" load-path))
    ;;        nil
    ;;      (list (rassq 'jka-compr-handler old-value))))
    ;;   ;; Ensure the new value persists through any current let-binding.
    ;;   (set-default-toplevel-value 'file-name-handler-alist
    ;;                               file-name-handler-alist)
    ;;   ;; Remember the old value to reset it as needed.
    ;;   (add-hook 'emacs-startup-hook
    ;;             (lambda ()
    ;;               (set-default-toplevel-value
    ;;                'file-name-handler-alist
    ;;                ;; Merge instead of overwrite to preserve any changes made
    ;;                ;; since startup.
    ;;                (delete-dups (append file-name-handler-alist old-value))))
    ;;             101))

    (unless noninteractive
      (progn
        ;; Disable mode-line-format during init
        (defun lm-emacs--reset-inhibited-vars-h ()
          (setq-default inhibit-redisplay nil
                        ;; Inhibiting `message' only prevents redraws and
                        inhibit-message nil)
          (redraw-frame))

        (defvar lm-emacs--default-mode-line-format mode-line-format
          "Default value of `mode-line-format'.")
        (setq-default mode-line-format nil)

        (defun lm-emacs--startup-load-user-init-file (fn &rest args)
          "Advice for startup--load-user-init-file to reset mode-line-format."
          (let (init)
            (unwind-protect
                (progn
                  (apply fn args)  ; Start up as normal
                  (setq init t))
              (unless init
                ;; If we don't undo inhibit-{message, redisplay} and there's an
                ;; error, we'll see nothing but a blank Emacs frame.
                (lm-emacs--reset-inhibited-vars-h))
              (unless (default-toplevel-value 'mode-line-format)
                (setq-default mode-line-format
                              lm-emacs--default-mode-line-format)))))

        (advice-add 'startup--load-user-init-file :around
                    #'lm-emacs--startup-load-user-init-file))

      ;; Without this, Emacs will try to resize itself to a specific column size
      (setq frame-inhibit-implied-resize t)

      ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted.
      ;; No second pass of case-insensitive search over auto-mode-alist.
      (setq auto-mode-case-fold nil)

      ;; Reduce *Message* noise at startup. An empty scratch buffer (or the
      ;; dashboard) is more than enough, and faster to display.
      (setq inhibit-startup-screen t
            inhibit-startup-echo-area-message user-login-name)
      (setq initial-buffer-choice nil
            inhibit-startup-buffer-menu t
            inhibit-x-resources t)

      ;; Disable bidirectional text scanning for a modest performance boost.
      (setq-default bidi-display-reordering 'left-to-right
                    bidi-paragraph-direction 'left-to-right)

      ;; Give up some bidirectional functionality for slightly faster re-display.
      (setq bidi-inhibit-bpa t)

      ;; Remove "For information about GNU Emacs..." message at startup
      (advice-add #'display-startup-echo-area-message :override #'ignore)

      ;; Suppress the vanilla startup screen completely. We've disabled it with
      ;; `inhibit-startup-screen', but it would still initialize anyway.
      (advice-add #'display-startup-screen :override #'ignore)

      ;; Shave seconds off startup time by starting the scratch buffer in
      ;; `fundamental-mode'
      (setq initial-major-mode 'fundamental-mode
            initial-scratch-message nil)

      (unless lm-emacs-debug
        ;; Unset command line options irrelevant to the current OS. These options
        ;; are still processed by `command-line-1` but have no effect.
        (unless (eq system-type 'darwin)
          (setq command-line-ns-option-alist nil))
        (unless (memq initial-window-system '(x pgtk))
          (setq command-line-x-option-alist nil)))))

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s with %d garbage collections."
                       (emacs-init-time) gcs-done)))
#+end_src

** Language environment
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (set-language-environment "UTF-8")

  ;; Set-language-environment sets default-input-method, which is unwanted.
  (setq default-input-method nil)

  ;; Some features that are not represented as packages can be found in
  ;; `features', but this can be inconsistent. The following enforce consistency:
  (if (fboundp #'json-parse-string)
      (push 'jansson features))
  (if (string-match-p "HARFBUZZ" system-configuration-features) ; no alternative
      (push 'harfbuzz features))
  (if (bound-and-true-p module-file-suffix)
      (push 'dynamic-modules features))

#+end_src

** Native compilation and Byte compilation
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (if (and (featurep 'native-compile)
           (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      ;; Activate `native-compile'
      (setq native-comp-jit-compilation t
            native-comp-deferred-compilation t  ; Obsolete since Emacs 29.1
            package-native-compile t)
    ;; Deactivate the `native-compile' feature if it is not available
    (setq features (delq 'native-compile features)))

  ;; Suppress compiler warnings and don't inundate users with their popups.
  (setq native-comp-async-report-warnings-errors
        (or lm-emacs-debug 'silent))
  (setq native-comp-warning-on-missing-source lm-emacs-debug)

  (setq debug-on-error lm-emacs-debug
        jka-compr-verbose lm-emacs-debug)
  (setq comp-async-report-warnings-errors nil)

  (setq byte-compile-warnings lm-emacs-debug)
  (setq byte-compile-verbose lm-emacs-debug)
#+end_src

** Post early init
#+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "XDG_CONFIG_HOME") (getenv "XDG_CONFIG_HOME") "~") "/.emacs.d")) :mkdirp yes
  (lm-emacs-load-user-init "post-early-init.el")
#+end_src

(lm-emacs-load-user-init "post-early-init.el")  
* Pre-init.el
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (lm-emacs-load-user-init "pre-init.el")
#+end_src

* Globals
*** My global variables
**** Machine dependent variables
Adjust those variables depending on the machine where emacs runs.
Maybe this section will be changed to load an external file
#+begin_src emacs-lisp
  (setq lm/pylsp-path "~/.local/.lsp/bin/pylsp")
  (setq lm/pses-path "/home/leonardo/Downloads/pses")
  (setq lm/pses-log-path "/home/leonardo/tmp")
#+end_src
**** Configuration files
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (setq lm/literate-config-name "init.org")
  (setq lm/conf-org-dir lm/this-buffer-path)
  (setq lm/dot-dir (file-name-directory (directory-file-name lm/conf-org-dir)))
  (setq lm/sound-dir (concat lm/dot-dir "sounds/"))
#+end_src

**** Active packages
#+begin_src emacs-lisp
#+end_src
*** My functions
**** Wezterm
Often i use wezterm as terminal choise
https://wezfurlong.org/wezterm/installation.html
because emacs, expecially on windows does not provide a good terminal mode. So
i need a way to easily call wezterm and open it in the current directory.

#+begin_src emacs-lisp
  (defun lm/run-wezterm ()
    (interactive)
    (start-process "wezterm" nil "wezterm" "start" "--cwd"
                   default-directory))
#+end_src
**** Inserting special characters for italian keyboard
Tilde and grave accent are not present in italian keyboard but often used in
programming so this function are a quick way to insert them in text

#+begin_src emacs-lisp
  (defun lm/insert-tilde ()                                      
    (interactive)                                 
    (insert-char (char-from-name "TILDE")))
  (defun lm/insert-grave-accent ()                                      
    (interactive)                                 
    (insert-char (char-from-name "GRAVE ACCENT")))
#+end_src
This function returns the directory containing this org file in case it differs
from the actual emacs config dir
#+begin_src emacs-lisp
  (defun lm/get-conf-org-dir ()
    (interactive)
    (file-name-directory buffer-file-name))
#+end_src
**** Switching tabs
#+begin_src emacs-lisp
  (defun lm/switch-to-tab-1 ()
    (interactive)
    (tab-bar-select-tab 1))
  (defun lm/switch-to-tab-2 ()
    (interactive)
    (tab-bar-select-tab 2))
  (defun lm/switch-to-tab-3 ()
    (interactive)
    (tab-bar-select-tab 3))
#+end_src
**** Open literate config
#+begin_src emacs-lisp
  (defun lm/open-literate-config ()
    (interactive)
    (find-file (concat lm/conf-org-dir lm/literate-config-name)))
#+end_src
**** Reload configuration
#+begin_src emacs-lisp
  (defun lm/reload-config ()
    (interactive)
    (load (concat user-emacs-directory "init.el")))
#+end_src
**** pomodoro
#+begin_src emacs-lisp
  (defun lm/pomodoro ()
    (interactive)
    (require 'org-element)
    (setq org-clock-sound (concat lm/sound-dir "bell.wav"))
    (unless (boundp 'lm/pomodoro-state)
      (setq lm/pomodoro-state 0))
    (let ((time-work "00:25:00")
          (time-pause "00:05:00"))
      (org-timer-set-timer
       (cond
        ((= (mod lm/pomodoro-state 2) 0) time-work)
        ((= (mod lm/pomodoro-state 3) 0) time-work)
        (t time-pause)))
      (setq lm/pomodoro-state (+ lm/pomodoro-state 1))))
#+end_src						
* Packages
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; ;;; package.el
  (when (bound-and-true-p lm-emacs-package-initialize-and-refresh)
    ;; Initialize and refresh package contents again if needed
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Install use-package if necessary
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    ;; Ensure use-package is available at compile time
    (eval-when-compile
      (require 'use-package)))

  ;; Ensure the 'use-package' package is installed and loaded

  ;;; Minibuffer
  ;; Allow nested minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Keep the cursor out of the read-only portions of the.minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

* Minibuffer
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Allow nested minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Keep the cursor out of the read-only portions of the.minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src
* Editor behaviour
** Misc
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; switch-to-buffer runs pop-to-buffer-same-window instead
  (setq switch-to-buffer-obey-display-actions t)

  (setq show-paren-delay 0.1
        show-paren-highlight-openparen t
        show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)

  (setq whitespace-line-column nil)  ; whitespace-mode

  ;; I reduced the default value of 9 to simplify the font-lock keyword,
  ;; aiming to improve performance. This package helps differentiate
  ;; nested delimiter pairs, particularly in languages with heavy use of
  ;; parentheses.
  (setq rainbow-delimiters-max-face-count 5)

  ;; Can be activated with `display-line-numbers-mode'
  (setq-default display-line-numbers-width 3)
  (setq-default display-line-numbers-widen t)

  (setq comint-prompt-read-only t)
  (setq comint-buffer-maximum-size 2048)

  (setq compilation-always-kill t
        compilation-ask-about-save nil
        compilation-scroll-output 'first-error)

  (setq truncate-string-ellipsis "â€¦")

  ;; Configure Emacs to ask for confirmation before exiting
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; Delete by moving to trash in interactive mode
  (setq delete-by-moving-to-trash (not noninteractive))
#+end_src

** Files
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Disable the warning "X and Y are the same file". Ignoring this warning is
  ;; acceptable since it will redirect you to the existing buffer regardless.
  (setq find-file-suppress-same-file-warnings t)

  ;; Resolve symlinks when opening files, so that any operations are conducted
  ;; from the file's true directory (like `find-file').
  (setq find-file-visit-truename t
        vc-follow-symlinks t)

  ;; Skip confirmation prompts when creating a new file or buffer
  (setq confirm-nonexistent-file-or-buffer nil)

  (setq uniquify-buffer-name-style 'forward)

  (setq mouse-yank-at-point t)

  ;; Prefer vertical splits over horizontal ones
  (setq split-width-threshold 170
        split-height-threshold nil)

  ;; The native border "uses" a pixel of the fringe on the rightmost
  ;; splits, whereas `window-divider` does not.
  (setq window-divider-default-bottom-width 1 ;
        window-divider-default-places t
        window-divider-default-right-width 1)

  (add-hook 'after-init-hook #'window-divider-mode)
#+end_src

** Backup files
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Avoid generating backups or lockfiles to prevent creating world-readable
  ;; copies of files.
  (setq create-lockfiles nil)
  (setq make-backup-files nil)

  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backup" user-emacs-directory))))
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq backup-by-copying-when-linked t)
  (setq backup-by-copying t)  ; Backup by copying rather renaming
  (setq delete-old-versions t)  ; Delete excess backup versions silently
  (setq version-control t)  ; Use version numbers for backup files
  (setq kept-new-versions 5)
  (setq kept-old-versions 5)
  (setq vc-make-backup-files nil)  ; Do not backup version controlled files
#+end_src

** Auto save
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Enable auto-save to safeguard against crashes or data loss. The
  ;; `recover-file' or `recover-session' functions can be used to restore
  ;; auto-saved data.
  (setq auto-save-default t)

  ;; Do not auto-disable auto-save after deleting large chunks of
  ;; text. The purpose of auto-save is to provide a failsafe, and
  ;; disabling it contradicts this objective.
  (setq auto-save-include-big-deletions t)

  (setq auto-save-list-file-prefix
        (expand-file-name "autosave/" user-emacs-directory))
  (setq tramp-auto-save-directory
        (expand-file-name "tramp-autosave/" user-emacs-directory))

  ;; Auto save options
  (setq kill-buffer-delete-auto-save-files t)
#+end_src

** Auto revert
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (setq revert-without-query (list ".")  ; Do not prompt
        auto-revert-stop-on-user-input nil
        auto-revert-verbose t)

  ;; Revert other buffers (e.g, Dired)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Recent files
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; `recentf' is an Emacs package that maintailinens a list of recently
  ;; accessed files, making it easier to reopen files you have worked on
  ;; recently.
  (setq recentf-max-saved-items 300) ; default is 20
  (setq recentf-auto-cleanup 'mode)
#+end_src

** Save place
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; `save-place-mode` enables Emacs to remember the last location within a file
  ;; upon reopening. This feature is particularly beneficial for resuming work at
  ;; the precise point where you previously left off.
  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
  (setq save-place-limit 600)
#+end_src

** Save hist
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)  
  ;; `savehist` is an Emacs feature that preserves the minibuffer history between
  ;; sessions. It saves the history of inputs in the minibuffer, such as commands,
  ;; search strings, and other prompts, to a file. This allows users to retain
  ;; their minibuffer history across Emacs restarts.
  (setq history-length 300)
  (setq savehist-save-minibuffer-history t)  ;; Default
#+end_src

** Frames and windows
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Resizing the Emacs frame can be costly when changing the font. Disable this
  ;; to improve startup times with fonts larger than the system default.
  (setq frame-resize-pixelwise t)

  ;; However, do not resize windows pixelwise, as this can cause crashes in some
  ;; cases when resizing too many windows at once or rapidly.
  (setq window-resize-pixelwise nil)

  (setq resize-mini-windows 'grow-only)
#+end_src

** Scrolling
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Enables faster scrolling through unfontified regions. This may result in
  ;; brief periods of inaccurate syntax highlighting immediately after scrolling,
  ;; which should quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; Keeps screen position if the scroll command moved it vertically out of the
  ;; window.
  (setq scroll-preserve-screen-position t)
#+end_src

** Mouse
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Emacs 29
  (when (memq 'context-menu lm-emacs-ui-features)
    (when (and (display-graphic-p) (fboundp 'context-menu-mode))
      (add-hook 'after-init-hook #'context-menu-mode)))

  (setq hscroll-margin 2
        hscroll-step 1
        ;; Emacs spends excessive time recentering the screen when the cursor
        ;; moves more than N lines past the window edges (where N is the value of
        ;; `scroll-conservatively`). This can be particularly slow in larger files
        ;; during extensive scrolling. If `scroll-conservatively` is set above
        ;; 100, the window is never automatically recentered. The default value of
        ;; 0 triggers recentering too aggressively. Setting it to 10 reduces
        ;; excessive recentering and only recenters the window when scrolling
        ;; significantly off-screen.
        scroll-conservatively 10
        scroll-margin 0
        scroll-preserve-screen-position t
        ;; Reduce cursor lag by preventing automatic adjustments to
        ;; `window-vscroll' for unusually long lines. Setting
        ;; `auto-window-vscroll' it to nil also resolves the issue of random
        ;; half-screen jumps during scrolling.
        auto-window-vscroll nil
        ;; Mouse
        mouse-wheel-scroll-amount '(1 ((shift) . hscroll))
        mouse-wheel-scroll-amount-horizontal 1)
#+end_src

** Cursor
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; The blinking cursor is distracting and interferes with cursor settings in
  ;; some minor modes that try to change it buffer-locally (e.g., Treemacs).
  ;; Additionally, it can cause freezing, especially on macOS, for users with
  ;; customized and colored cursors.
  (blink-cursor-mode -1)

  ;; Don't blink the paren matching the one at point, it's too distracting.
  (setq blink-matching-paren nil)

  ;; Don't stretch the cursor to fit wide characters, it is disorienting,
  ;; especially for tabs.
  (setq x-stretch-cursor nil)
#+end_src

** Annoyances
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; No beeping or blinking
  (setq visible-bell nil)
  (setq ring-bell-function #'ignore)

  ;; This controls how long Emacs will blink to show the deleted pairs with
  ;; `delete-pair'. A longer delay can be annoying as it causes a noticeable pause
  ;; after each deletion, disrupting the flow of editing.
  (setq delete-pair-blink-delay 0.03)
#+end_src

** Indent and formatting
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (setq-default left-fringe-width  8)
  (setq-default right-fringe-width 8)

  ;; Do not show an arrow at the top/bottomin the fringe and empty lines
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)

  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)

  ;; Disable wrapping by default due to its performance cost.
  (setq-default truncate-lines t)

  ;; If enabled and `truncate-lines' is disabled, soft wrapping will not occur
  ;; when the window is narrower than `truncate-partial-width-windows' characters.
  (setq truncate-partial-width-windows nil)

  ;; Prefer spaces over tabs. Spaces offer a more consistent default compared to
  ;; 8-space tabs. This setting can be adjusted on a per-mode basis as needed.
  (setq-default indent-tabs-mode nil
                tab-width 4)

  ;; Enable indentation and completion using the TAB key
  (setq-default tab-always-indent nil)

  ;; Enable multi-line commenting which ensures that `comment-indent-new-line'
  ;; properly continues comments onto new lines, which is useful for writing
  ;; longer comments or docstrings that span multiple lines.
  (setq comment-multi-line t)

  ;; We often split terminals and editor windows or place them side-by-side,
  ;; making use of the additional horizontal space.
  (setq-default fill-column 80)

  ;; Disable the obsolete practice of end-of-line spacing from the
  ;; typewriter era.
  (setq sentence-end-double-space nil)

  ;; According to the POSIX, a line is defined as "a sequence of zero or
  ;; more non-newline characters followed by a terminating newline".
  (setq require-final-newline t)

  ;; Remove duplicates from the kill ring to reduce clutter
  (setq kill-do-not-save-duplicates t)

  ;; Ensures that empty lines within the commented region are also commented out.
  ;; This prevents unintended visual gaps and maintains a consistent appearance,
  ;; ensuring that comments apply uniformly to all lines, including those that are
  ;; otherwise empty.
  (setq comment-empty-lines t)

  ;; Eliminate delay before highlighting search matches
  (setq lazy-highlight-initial-delay 0)
#+end_src

* Modeline
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Setting `display-time-default-load-average' to nil makes Emacs omit the load
  ;; average information from the mode line.
  (setq display-time-default-load-average nil)

  ;; Display the current line and column numbers in the mode line
  (setq line-number-mode t)
  (setq column-number-mode t)
  (global-display-line-numbers-mode)
  (setq display-line-numbers 'relative)
#+end_src

* Filetype
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Do not notify the user each time Python tries to guess the indentation offset
  (setq python-indent-guess-indent-offset-verbose nil)
#+end_src

* Font / Text scale
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  ;; Avoid automatic frame resizing when adjusting settings.
  (setq global-text-scale-adjust-resizes-frames nil)
#+end_src

* Custom file
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (load-file custom-file)
#+end_src
* Post-init.el
#+begin_src emacs-lisp :var lm/this-buffer-path=(file-name-directory buffer-file-name)
  (lm-emacs-load-user-init "post-init.el")
#+end_src

* Plugins
** evil-mode
#+begin_src emacs-lisp :tangle (expand-file-name "post-init.el" (concat (if (getenv "xdg_config_home") (getenv "xdg_config_home") "~") "/.emacs.d")) :mkdirp yes
  (use-package evil
    :defer 1
    :init
    (setq lm/evil-mode t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (unless (display-graphic-p) (setq evil-want-C-i-jump nil))
    (setq evil-undo-system 'undo-redo)
    (defvar lm/leader-map (make-sparse-keymap)
      "Keymap for \"leader key\" shortcuts")
    :config
    ;; ----------------------------- LEADER KEYMAPS ------------------------------
    (keymap-set evil-normal-state-map "SPC" lm/leader-map)
    (keymap-set evil-motion-state-map "SPC" lm/leader-map)
    (keymap-set lm/leader-map "SPC" 'execute-extended-command)
    (defvar lm/leader-map-buffer (make-sparse-keymap)
      "sub-keymap for buffer operations")
    (keymap-set lm/leader-map "b" `("+Buffer" . ,lm/leader-map-buffer))
    (keymap-set lm/leader-map-buffer "d" 'kill-this-buffer)
    (keymap-set lm/leader-map-buffer "s" 'save-buffer)
    (keymap-set lm/leader-map-buffer "l" 'switch-to-buffer)
    (keymap-set lm/leader-map-buffer "L" 'list-buffers)
    (defvar lm/leader-map-quit (make-sparse-keymap)
      "sub-keymap for quit operations")
    (keymap-set lm/leader-map "q" `("+Quit" . ,lm/leader-map-quit))
    (keymap-set lm/leader-map-quit "q" 'save-buffers-kill-terminal)
    (defvar lm/leader-map-find (make-sparse-keymap)
      "sub-keymap for finding operations")
    (keymap-set lm/leader-map "f" `("+Find" . ,lm/leader-map-find))
    (keymap-set lm/leader-map-find "f" 'project-find-file)
    (keymap-set lm/leader-map-find "s" 'evil-search-forward)
    (keymap-set lm/leader-map-find "b" 'evil-search-backward)
    (keymap-set lm/leader-map-find "r" 'query-replace)
    (defvar lm/leader-map-appearence (make-sparse-keymap)
      "sub-keymap for customizing appearence operations")
    (keymap-set lm/leader-map "a" `("+Appearence" . ,lm/leader-map-appearence))
    (keymap-set lm/leader-map-appearence "c" 'customize-themes)
    (keymap-set lm/leader-map-appearence "t" 'toggle-theme)
    (keymap-set lm/leader-map-appearence "m" 'menu-bar-mode)
    (defvar lm/leader-map-config (make-sparse-keymap)
      "sub-keymap for customizing configuration operations")
    (keymap-set lm/leader-map "c" `("+Configuration" . ,lm/leader-map-config))
    (keymap-set lm/leader-map-config "c" 'lm/open-literate-config)
    (keymap-set lm/leader-map-config "r" 'lm/reload-config)
    (keymap-set lm/leader-map-config "v" 'evil-mode)
    (defvar lm/leader-map-project (make-sparse-keymap)
      "sub-keymap for customizing project operations")
    (keymap-set lm/leader-map "p" `("+Project" . ,lm/leader-map-project))
    (keymap-set lm/leader-map-project "c" 'lm/run-wezterm)
    (keymap-set lm/leader-map-project "p" 'project-asyn-shell-command)
    (defvar lm/leader-map-special-chars (make-sparse-keymap)
      "sub-keymap for inserting special characters")
    (keymap-set lm/leader-map "i" `("+Insert" . ,lm/leader-map-special-chars))
    (keymap-set lm/leader-map-special-chars "t" 'lm/insert-tilde)
    (keymap-set lm/leader-map-special-chars "g" 'lm/insert-grave-accent)
    (defvar lm/leader-map-tools (make-sparse-keymap)
      "sub-keymap for tools")
    (keymap-set lm/leader-map "t" `("+Tools" . ,lm/leader-map-tools))
    (keymap-set lm/leader-map-tools "p" 'lm/pomodoro)
    ;; ------------------------- NORMAL STATE KEYMAPS ----------------------------
    (keymap-set evil-normal-state-map "H" 'previous-buffer)
    (keymap-set evil-normal-state-map "L" 'next-buffer)
    (keymap-set evil-normal-state-map "U" 'undo-redo)
    ;; ------------------------- INSERT STATE KEYMAPS ----------------------------
    (keymap-set evil-insert-state-map "C-g" 'evil-normal-state)
    (defvar lm/insert-map (make-sparse-keymap)
      "Keymap for shortcuts in insert mode")
    (keymap-set evil-insert-state-map "C-c" lm/insert-map)
    (defvar lm/insert-map-special-chars (make-sparse-keymap)
      "sub-keymap for inserting special characters")
    (keymap-set lm/insert-map "s" `("+Special" . ,lm/insert-map-special-chars))
    (keymap-set lm/insert-map-special-chars "t" 'lm/insert-tilde)
    (keymap-set lm/insert-map-special-chars "g" 'lm/insert-grave-accent)
    ;; ----------------------------- GLOBAL KEYMAPS ------------------------------
    (keymap-set global-map "C-s" 'save-buffer)
    (keymap-set global-map "M-1" 'lm/switch-to-tab-1)
    (keymap-set global-map "M-2" 'lm/switch-to-tab-2)
    (keymap-set global-map "M-3" 'lm/switch-to-tab-3)
    ;; ---------------------------------------------------------------------------
    (evil-mode))
  (use-package evil-collection
    :after evil
    :custom (evil-collection-want-unimpaired-p nil)
    :init
    (setq evil-collection-key-blacklist '("SPC"))
    :config
    (evil-collection-init))
#+end_src
** which-key
Which-key permits to display chords in a window at the bottom of the
application when starting the sequence
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.1)
    (which-key-setup-minibuffer))
#+end_src
** COMMENT yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :after company
    :config
    (yas-minor-mode)
    (global-set-key (kbd "C-c y") 'company-yasnippet))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src

** Autocomplete
*** COMMENT company
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :defer 1
    :init
    (unless (and (display-graphic-p) (not lm/evil-mode))
      (add-hook 'evil-mode-hook (lambda ()
                                  (keymap-set evil-insert-state-map "C-@" 'company-complete))))
    (setq lm/company t)
    (setq company-dabbrev-ignore-case t)
    (setq company-dabbrev-code-ignore-case t)    
    (setq company-keywords-ignore-case t)
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.0)
    :config
    ;; (add-to-list 'company-backends '(company-capf :with company-dabbrev))
    (global-company-mode t))

#+end_src
*** COMMENT corfu
#+begin_src emacs-lisp
  (use-package corfu
    :defer 1
    :init
    (setq corfu-auto t
          corfu-auto-delay 0.3
          corfu-preview-current nil
          corfu-quit-no-match 'separator
          completion-styles '(basic ))
    :config
    (global-corfu-mode))

  (unless (display-graphic-p)
    (use-package corfu-terminal
      :init
      (custom-set-faces
       '(corfu-default ((t (:background "black")))))
      :config
      (corfu-terminal-mode)))
#+end_src
*** COMMENT only built-in
#+begin_src emacs-lisp
  ;; (setq completions-format 'one-column)
  (setq completions-header-format nil)
  (setq completions-max-height 20)
  (setq completion-auto-select nil)
  (define-key minibuffer-mode-map (kbd "C-n") 'minibuffer-next-completion)
  (define-key minibuffer-mode-map (kbd "C-p") 'minibuffer-previous-completion)

  (defun my/minibuffer-choose-completion (&optional no-exit no-quit)
    (interactive "P")
    (with-minibuffer-completions-window
      (let ((completion-use-base-affixes nil))
        (choose-completion nil no-exit no-quit))))

  (define-key completion-in-region-mode-map (kbd "M-RET") 'my/minibuffer-choose-completion)

  ;; (use-package cape
  ;;   :defer nil
  ;;   :bind (("C-<SPC>" . 'completion-at-point))
  ;;   :init
  ;;   (setq completion-ignore-case t)
  ;;   (add-to-list 'completion-at-point-functions 'cape-dabbrev)
  ;;   (add-to-list 'completion-at-point-functions 'cape-file)) 
#+end_src
* COMMENT Old
** COMMENT Editor behaviour
*** geometry and font
Those are settings relative to:
- transparency: /alpha/
- window size at start: /width/ and /height/
- font: /font/
- avoid the vertical scroll bar on new frames: /vertical-scroll-bar/

#+begin_src emacs-lisp
  ;; (set-frame-parameter (selected-frame) 'alpha '(95 . 100)
  (setq default-frame-alist '((width . 90)
                              (height . 40)
                              (alpha . (100 . 100))))

  ;; (defvar lm/font
  ;;   (cond
  ;;    ((string-equal system-type "gnu/linux") "JetBrains Mono Nerd Font-10")
  ;;    ((string-equal system-type "windows-nt") "JetBrains Mono-10")))
  ;; (setf (alist-get 'font default-frame-alist) lm/font)

  ;; disable scroll-bar even in new frames
  (add-to-list 'default-frame-alist
               '(vertical-scroll-bars . nil))
#+end_src

*** tab width
Set the default width of tab to 2

#+begin_src emacs-lisp
  (setq tab-width 2)
#+end_src

*** tab-always-indent
Set the behaviour of tab so that it first try to indent the line, if the line is
already indented then it does the selected action
#+begin_src emacs-lisp
  (setq tab-always-intent 'complete)
#+end_src
*** encoding system
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src
*** process buffer
increase the amount of data that emacs can read from processes; default is 4 kb

#+begin_src emacs-lisp
  (setq read-process-output-max (* 10 1024 1024)) ;; 10 Mb
#+end_src

*** autosaving
disable backup of files by default
change the defaults directory where to store ~ , # and .# files, respectively
backup and autosaves and lockfiles.

#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
  ;; autosaves files in one common directory
  ;; (setq backup-directory-alist  `(("." . ,(if lm/autosave_dir lm/autosave_dir (concat user-emacs-directory "backups")))))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" ,lm/autosave_dir t)))
#+end_src

*** buffer scrolling
#+begin_src emacs-lisp
  ;; (setq scroll-margin 5)
  (setq redisplay-dont-pause t)
  ;; (setq scroll-conservatively scroll-margin)
  (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position t)
  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq scroll-step 1)
  (setq auto-window-vscroll nil)
  (setq scroll-error-top-bottom t)
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-inhibit-click-time nil)
  (setq fast-but-imprecise-scrolling t)
#+end_src
**** pixel-scroll-precision-mode
#+begin_src emacs-lisp
  (unless (version< emacs-version "29")
    (progn
      ;; (setq pixel-scroll-precision-use-momentum t)
      (setq pixel-scroll-precision-interpolate-mice t)
      (setq pixel-scroll-precision-interpolate-page t)
      (setq pixel-scroll-precision-large-scroll-height 20.0)
      (pixel-scroll-precision-mode)))
#+end_src

*** auto revert mode
automatically refresh the buffer when the correspondig file has been changed
externally

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

*** automatic pairs mode
automatically insert the pair of some symbols like braces, parenthesis, etc...

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

*** noises messages
disable:
- the startup screen,
- the prompt for killing buffer
and ask just for (y/n) instead of complete yes and no

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)                              ;; no startup screen
  (setq message-kill-buffer-query nil)                          ;; no prompt kill buffer
  (setq use-short-answers t)
#+end_src

*** prefer newer editor files
this is expecially useful for loading the changes to term.el in Windows for
running powershell in term and ansi-term
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

*** native compilation
#+begin_src emacs-lisp
  (setq native-compile-always-compile t
        ;; package-native-compile t
        )
#+end_src

*** row numbers, highlight current line and column 80
#+begin_src emacs-lisp
  (column-number-mode)

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (dolist (mode '(org-mode-hook
                  markdown-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  latex-mode-hook
                  treemacs-mode-hook
                  eww-mode-hook
                  ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (setq-default fill-column 80)
  (global-display-fill-column-indicator-mode)
  (dolist (mode '(term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  latex-mode-hook
                  org-mode-hook
                  markdown-mode-hook))
    (add-hook mode (lambda () (display-fill-column-indicator-mode 0))))

  (if (display-graphic-p)
      (global-hl-line-mode))
#+end_src

#+RESULTS:
: t

*** mouse right click
Enable the context menu with the right click of the mouse
#+begin_src emacs-lisp
  (context-menu-mode)
#+end_src

*** remove dired buffers or those surrounded by * from cycling
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'buffer-predicate
                       (lambda (buf) 
                         (let ((name (buffer-name buf)))
                           (not (or (string-prefix-p "*" name)
                                    (eq 'dired-mode (buffer-local-value 'major-mode buf)))))))
#+end_src
*** fido
#+begin_src emacs-lisp
  (fido-vertical-mode t)
#+end_src
** COMMENT Repositories
Setup the melpa repository and refresh the contents of package-archives to be
prepared for plugins installation.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** COMMENT use-package
/use-package/ is a nice and useful package manager

- the /use-package-always-ensure/ variable means that package not
  already present will be downloaded
- the /use-package-compute-statistics/ enable to profile the startup time of
  installed packages via the *use-package-profile* command.
- diminish is used to hide some mode from mode bar
  
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+end_src

*** diminish
*diminish* enable to hide minor-mode names from minibuffer.  To hide a
minor-mode put `:diminish` in the use-package configuration of the
mode package
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** COMMENT tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :defer t
    :init
    (dolist (hook '(c-mode-common-hook))
      (add-hook hook #'tree-sitter-mode)))
  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src
** COMMENT Modus theme
#+begin_src emacs-lisp
                                          ; (load-theme 'modus-vivendi)
  (setq modus-themes-headings
        '((1 . (variable-pitch light 1.4))))
#+end_src
** COMMENT Dired
#+begin_src emacs-lisp
  (use-package dired
    :hook (dired-mode . dired-hide-details-mode)
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (setq dired-dwim-target t))
#+end_src
** COMMENT Grep
use ripgrep as grep-find command
#+begin_src emacs-lisp
  (use-package grep
    :defer t
    :config
    (grep-apply-setting
     'grep-find-command
     '("rg -n -H --no-heading -e  ." . 26)))
#+end_src
** COMMENT non evil keymaps
#+begin_src emacs-lisp
  (defvar lm/leader-map (make-sparse-keymap)
    "Keymap for \"leader key\" shortcuts")
  :config
  ;; ----------------------------- LEADER KEYMAPS ------------------------------
  (keymap-set global-map "C-c SPC" lm/leader-map)
  (keymap-set lm/leader-map "SPC" 'execute-extended-command)
  (defvar lm/leader-map-buffer (make-sparse-keymap)
    "sub-keymap for buffer operations")
  (keymap-set lm/leader-map "b" `("+Buffer" . ,lm/leader-map-buffer))
  (keymap-set lm/leader-map-buffer "d" 'kill-this-buffer)
  (keymap-set lm/leader-map-buffer "s" 'save-buffer)
  (keymap-set lm/leader-map-buffer "l" 'switch-to-buffer)
  (keymap-set lm/leader-map-buffer "L" 'list-buffers)
  (defvar lm/leader-map-quit (make-sparse-keymap)
    "sub-keymap for quit operations")
  (keymap-set lm/leader-map "q" `("+Quit" . ,lm/leader-map-quit))
  (keymap-set lm/leader-map-quit "q" 'save-buffers-kill-terminal)
  (defvar lm/leader-map-find (make-sparse-keymap)
    "sub-keymap for finding operations")
  (keymap-set lm/leader-map "f" `("+Find" . ,lm/leader-map-find))
  (keymap-set lm/leader-map-find "f" 'project-find-file)
  (keymap-set lm/leader-map-find "s" 'search-forward)
  (keymap-set lm/leader-map-find "b" 'search-backward)
  (keymap-set lm/leader-map-find "r" 'query-replace)
  (defvar lm/leader-map-appearence (make-sparse-keymap)
    "sub-keymap for customizing appearence operations")
  (keymap-set lm/leader-map "a" `("+Appearence" . ,lm/leader-map-appearence))
  (keymap-set lm/leader-map-appearence "c" 'customize-themes)
  (keymap-set lm/leader-map-appearence "t" 'toggle-theme)
  (keymap-set lm/leader-map-appearence "m" 'menu-bar-mode)
  (defvar lm/leader-map-config (make-sparse-keymap)
    "sub-keymap for customizing configuration operations")
  (keymap-set lm/leader-map "c" `("+Configuration" . ,lm/leader-map-config))
  (keymap-set lm/leader-map-config "c" 'lm/open-literate-config)
  (keymap-set lm/leader-map-config "r" 'lm/reload-config)
  (defvar lm/leader-map-project (make-sparse-keymap)
    "sub-keymap for customizing project operations")
  (keymap-set lm/leader-map "p" `("+Project" . ,lm/leader-map-project))
  (keymap-set lm/leader-map-project "c" 'lm/run-wezterm)
  (keymap-set lm/leader-map-project "p" 'project-asyn-shell-command)
  (defvar lm/leader-map-special-chars (make-sparse-keymap)
    "sub-keymap for inserting special characters")
  (keymap-set lm/leader-map "i" `("+Insert" . ,lm/leader-map-special-chars))
  (keymap-set lm/leader-map-special-chars "t" 'lm/insert-tilde)
  (keymap-set lm/leader-map-special-chars "g" 'lm/insert-grave-accent)
  (defvar lm/leader-map-tools (make-sparse-keymap)
    "sub-keymap for tools")
  (keymap-set lm/leader-map "t" `("+Tools" . ,lm/leader-map-tools))
  (keymap-set lm/leader-map-tools "p" 'lm/pomodoro)
#+end_src
** COMMENT LSP
*** lsp server commands
#+begin_src emacs-lisp
  (setq lm/pylsp-cmd lm/pylsp-path)
  (setq lm/pses-cmd `("pwsh" "-NoLogo" "-NoProfile" "-Command" ,(concat lm/pses-path "/PowerShellEditorServices/Start-EditorServices.ps1") "-BundledModulesPath" ,(concat lm/pses-path "/PowerShellEditorServices/module") "-Stdio" "-LogPath" ,(concat lm/pses-log-path "/pses.log") "-SessionDetailsPath" ,(concat lm/pses-log-path "/session.json") "-HostName" "Emacs" "-HostProfileId" "Emacs" "-HostVersion" "1.0.0" "-LogLevel" "Diagnostic"))
#+end_src
*** COMMENT eglot
#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :init
    (setq eglot-connect-timeout 90)


    (lm/leader-keys
     :keymaps 'override
     :states 'normal
     "l" '(:ignore t :which-key "lsp")
     "ll" '(:ignore t :which-key "start lsp-mode")
     "lle" '(eglot :which-key "eglot"))
    :config
    (lm/leader-keys
     :keymaps 'override
     :states 'normal
     "lf" '(eglot-format-buffer :which-key "format buffer")
     "ls" '(eglot-shutdown-all :which-key "shutdown workspace")
     "lg" '(:ignore t :which-key "go to")
     "lgd" '(xref-find-definitions :which-key "definition")
     "lgr" '(xref-find-references :which-key "references")
     "ld" '(:ignore t :which-key "diagnostics")
     "ldl" '(flymake-show-project-diagnostics :which-key "project")
     "ldn" '(flymake-goto-next-error :which-key "next")
     "ldp" '(flymake-goto-prev-error :which-key "previous")
     "lc" '(:ignore t :which-key "code actions")
     "lcr" '(eglot-rename :which-key "rename")
     "lco" '(eglot-code-action-organize-imports :which-key "organize imports")
     "lco" '(eglot-code-actions :which-key "actions")
     "lh" '(eldoc :which-key "documentation")
     )

    (add-to-list 'eglot-server-programs	`(python-mode . (,lm/pylsp-cmd)))
    (add-to-list 'eglot-server-programs	`(powershell-mode . ,lm/pses-cmd)))
#+end_src
*** lsp-mode
i'm trying to use eglot instead of lsp-mode but i keep this configuration code
#+begin_src emacs-lisp
  (defun lm/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (setenv "LSP_USE_PLISTS" "true")
  (setq lsp-use-plists t)
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (add-hook 'prog-mode-hook 'lsp-deferred)
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-idle-delay 0.100)
    (setq lsp-auto-execute-action nil)
    ;; ----------------------------- LSP KEYMAPS -------------------------------
    (defvar lm/leader-map-lsp (make-sparse-keymap)
      "sub-keymap for lsp operations")
    (keymap-set lm/leader-map "l" `("+lsp" . ,lm/leader-map-lsp))
    (keymap-set lm/leader-map-lsp "f" 'lsp-format-buffer)
    (defvar lm/leader-map-lsp-go-to (make-sparse-keymap)
      "sub-keymap for lsp go to operations")
    (keymap-set lm/leader-map-lsp "g" `("+Go to" . ,lm/leader-map-lsp-go-to))
    (keymap-set lm/leader-map-lsp-go-to "d" 'lsp-find-definition)
    (keymap-set lm/leader-map-lsp-go-to "D" 'lsp-find-declaration)
    (keymap-set lm/leader-map-lsp-go-to "i" 'lsp-find-implementation)
    (keymap-set lm/leader-map-lsp-go-to "r" 'lsp-find-references)
    (defvar lm/leader-map-lsp-diagnostics (make-sparse-keymap)
      "sub-keymap for lsp diagnostics operations")
    (keymap-set lm/leader-map-lsp "d" `("+Diagnostics" . ,lm/leader-map-lsp-diagnostics))
    (keymap-set lm/leader-map-lsp-diagnostics "l" 'flymake-show-project-diagnostics)
    (keymap-set lm/leader-map-lsp-diagnostics "n" 'flymake-goto-next-error)
    (keymap-set lm/leader-map-lsp-diagnostics "p" 'flymake-goto-prev-error)
    ;; -------------------------- LSP REMOTE CONNECTIONS -----------------------
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
                      :major-modes '(c-mode c++-mode)
                      :remote? t
                      :server-id 'clangd-remote))
    )

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  ;; (use-package lsp-pyright
  ;;   :after lsp-mode
  ;;   :ensure t)
#+end_src
** COMMENT org-mode
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :config)
#+end_src
** COMMENT Programming languages
*** C/C++
**** Windows clangd with MSys2/Mingw-w64
On Windows, when using MSys2-Mingw-64 to compile and clangd as LSP a per project
configuration file named /.clangd/ or a global one named
/~\AppData\Local\clangd\config.yaml/ is required. 
The content of the file must be

#+begin_src dot
  CompileFlags:
  Add: [-target, x86_64-pc-windows-gnu]
#+end_src
**** cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("\\CMakeLists.txt" . cmake-mode))
#+end_src

*** Arduino
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ino" .
                                  (lambda ()
                                    (c-or-c++-mode)
                                    (setq lsp-clients-clangd-args
                                          `(
                                            "-j=2"
                                            "--background-index"
                                            "--clang-tidy"
                                            "--completion-style=detailed"
                                            (concat "--query-driver=" (getenv-internal "HOME") "/.platformio/packages/toolchain-atmelavr/bin/avr-g++"))))))
#+end_src


# * Keybindings
*** Python
#+begin_src emacs-lisp
  (use-package python-black
    :after python-mode)
  (setq python-indent-offset 2)
#+end_src

*** Powershell
#+begin_src emacs-lisp
  (use-package powershell    
    :defer t
    :init
    (setq compile-command "pwsh -c ./project.ps1 ")
    :commands powershell)

  (use-package ob-powershell
    :after org)
#+end_src

*** MATLAB
#+begin_src emacs-lisp
  (use-package matlab-mode
    :defer t
    :mode ("\\.m\\'" . matlab-mode))
#+end_src

** COMMENT olivetti
This is a nice package for zen mode editing
#+begin_src emacs-lisp
  (use-package olivetti
    :defer 1
    :init
    (lm/leader-keys
     :keymaps 'override
     :states 'normal
     "ao" '(olivetti-mode :which-key "olivetti mode"))
    :config
    (add-hook 'olivetti-mode-hook (lambda ()
                                    (display-line-numbers-mode 0)
                                    (display-fill-column-indicator-mode 0))))
#+end_src
** COMMENT Removable
*** general
general is a package that allow to use a <leader> keys for the chords.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :defer t
    :config
    (general-override-mode)

    (general-define-key
     "C-z" 'undo
     "M-z" 'undo-redo
     )

    (general-create-definer lm/leader-keys
                            :prefix "<SPC>")

    (lm/leader-keys
     :keymaps '(override)
     :states '(normal motion)
     "<SPC>" '(execute-extended-command :which-key "m-x")
     "q"     '(:ignore t :which-key "+Quit")
     "qq"    '(save-buffers-kill-terminal :which-key "save all and quit")
     "b"     '(:ignore t :which-key "+Buffers")
     "bd"    '(kill-this-buffer :which-key "kill buffer")
     "bs"    '(save-buffer :which-key "save buffer")
     "bl"    '(switch-to-buffer :which-key "switch to buffer")
     "bL"    '(list-buffers :which-key "list buffers")
     "f"     '(:ignore t :which-key "+Find")
     "ff"     '(project-find-file :which-key "find file")
     "fs"    '(evil-search-forward :which-key "search forward")
     "fb"    '(evil-search-backward :which-key "search backward")
     "fr"    '(query-replace :which-key "query replace")
     "a"     '(:ignore t :which-key "+Appearence")
     "ac"    '(customize-themes :which-key "customize themes")
     "at"    '(toggle-theme :which-key "toggle theme")
     "am"    '(menu-bar-mode :which-key "toggle menu bar")
     "p"     '(:ignore t :which-key "+Project")
     "pc"    '(lm/run-wezterm :which-key "wezterm here")
     "pp"    '(project-async-shell-command :which-key "wezterm here")
     "i"     '(:ignore t :which-key "+Insert")
     "it"    '(lm/insert-tilde :which-key "~")
     "ig"    '(lm/insert-grave-accent :which-key "`")
     "t"     '(:ignore t :which-key "+Tools")
     "tp"    '(lm/pomodoro :which-key "pomodoro")
     "c"     '(:ignore t :which-key "+Configuration")
     "cc"    '(lm/open-literate-config :which-key "open literate configuration")
     "cv"    '(evil-mode :which-key "toggle vim mode")
     "cr"    '(lm/reload-config :which-key "reload init.el")
     ))
#+end_src
*** evil
#+begin_src emacs-lisp
  (use-package evil
    :after general
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (unless (display-graphic-p) (setq evil-want-C-i-jump nil))
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode)
    (general-define-key
     :states '(normal insert)
     "C-g" 'evil-normal-state
     "C-s" 'save-buffer)

    (general-define-key
     :states '(insert)
     "C-g" 'evil-normal-state
     )
    (general-define-key
     :states '(normal)
     :keymaps 'override
     "H" 'previous-buffer
     "L" 'next-buffer)

    (general-define-key
     :states '(visual)
     "gc" 'comment-dwim))
  (use-package evil-collection
    :after evil
    :custom (evil-collection-want-unimpaired-p nil)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-normal-state-map (kbd "U") 'undo-redo)
    (define-key evil-ex-completion-map (kbd "C-c") nil)
    (define-key evil-ex-completion-map (kbd "C-c t") 'lm/insert-tilde)
    (define-key evil-ex-completion-map (kbd "C-c g") 'lm/insert-grave-accent)
    (evil-collection-init))
#+end_src

*** COMMENT pdf-tools
pdf-tools enable to visualize pdf inside emacs and provides useful features like
midnight mode
on windows it require msys2
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer (if (deamonp) nil t)
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config (add-hook 'pdf-view-mode-hook 'pdf-tools-enable-minor-modes))
#+end_src


* src_tags 
;; #+begin_src emacs-lisp :tangle (expand-file-name "early-init.el" (concat (if (getenv "xdg_config_home") (getenv "xdg_config_home") "~") "/.emacs.d")) :mkdirp yes
;; #+end_src
;; #+begin_src emacs-lisp :tangle (expand-file-name "post-init.el" (concat (if (getenv "xdg_config_home") (getenv "xdg_config_home") "~") "/.emacs.d")) :mkdirp yes
;; #+end_src
    
