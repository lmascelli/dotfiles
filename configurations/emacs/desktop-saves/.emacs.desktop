;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Sat Oct 19 19:37:58 2024
;; Desktop file format version 208
;; Emacs version 29.4

;; Global section:
(setq desktop-saved-frameset [frameset 1 (26387 61046 626523 504000) (desktop . "208") "leonardo@leonardo" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font . "-ADBO-Source Code Pro-regular-normal-normal-*-13-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 0) (child-frame-border-width) (right-divider-width . 1) (bottom-divider-width . 1) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#DCDCDC") (background-color . "#3F3F3F") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tab-bar-lines . 1) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 16) (scroll-bar-height . 16) (alpha) (alpha-background) (no-focus-on-map) (no-accept-focus) (fullscreen . maximized) (visibility . t) (use-frame-synchronization) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#FFFFEF") (font-parameter) (sticky) (shaded) (environment) (last-focus-update . t) (dnd-root-window-position) (tabs (current-tab (name . "spike-h5/lib.rs") (explicit-name)) (tab (name . "*spike-rs-eshell*") (explicit-name) (time . 1729359438.0992308) (ws ((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 80) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 17) (min-pixel-width-safe . 16)) leaf (pixel-width . 1920) (pixel-height . 1018) (total-width . 240) (total-height . 60) (normal-height . 1.0) (normal-width . 1.0) (buffer "*spike-rs-eshell*" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 18932) (start . 18932)) (prev-buffers ("*spike-rs-eshell*" 1 21148) ("native_c/lib.rs" 26280 28044) ("spike-h5/lib.rs" 24931 24931))))) (frameset--id . "735F-46A1-6795-A830") (frameset--mini t . t) (height . 60) (width . 238) (modeline . t) (unsplittable) (left . 0) (top . 28) (icon-name) (display . ":1") (explicit-name)) ((min-height . 4) (min-width . 20) (min-height-ignore . 3) (min-width-ignore . 9) (min-height-safe . 1) (min-width-safe . 4) (min-pixel-height . 68) (min-pixel-width . 160) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 72) (min-pixel-height-safe . 17) (min-pixel-width-safe . 32)) hc (pixel-width . 1920) (pixel-height . 1018) (total-width . 240) (total-height . 59) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 960) (pixel-height . 1018) (total-width . 120) (total-height . 59) (normal-height . 1.0) (normal-width . 0.5) (buffer "native_c/lib.rs" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 28130) (start . 28109)) (prev-buffers ("native_c/lib.rs" 26280 28044) ("spike-h5/lib.rs" 24931 24931))) (leaf (last . t) (pixel-width . 960) (pixel-height . 1018) (total-width . 120) (total-height . 59) (normal-height . 1.0) (normal-width . 0.5) (buffer "spike-h5/lib.rs" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 28355) (start . 28334)) (next-buffers "main.rs") (prev-buffers ("main.rs" 1 693) ("spike-h5/lib.rs" 24965 26295) ("*spike-rs-eshell*" 226 2755) ("native_c/lib.rs" 26274 28332)))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . #("                                        for (i, val) in times.iter().enumerate()\n                                        {\n                                            if *val >= start {\n                                                i_start = i;\n                                                break;\n                                            }\n                                        }\n                                        for (i, val) in times.iter().enumerate()\n                                        {\n                                            if *val >= end {\n                                                i_end = i;\n                                                break;\n                                            }\n                                        }\n                                        Ok((\n                                            times[i_start..i_end]\n                                                .iter()\n                                                .map(|x| *x)\n                                                .collect(),\n                                            values[i_start..i_end]\n                                                .iter()\n                                                .map(|x| *x)\n                                                .collect(),\n                                        ))\n" 0 40 (yank-handler (evil-yank-line-handler nil t) fontified t) 40 43 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 43 45 (yank-handler (evil-yank-line-handler nil t) fontified t) 45 46 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 46 48 (yank-handler (evil-yank-line-handler nil t) fontified t) 48 51 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 51 53 (yank-handler (evil-yank-line-handler nil t) fontified t) 53 55 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 55 167 (yank-handler (evil-yank-line-handler nil t) fontified t) 167 169 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 169 234 (yank-handler (evil-yank-line-handler nil t) fontified t) 234 241 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 241 295 (yank-handler (evil-yank-line-handler nil t) fontified t) 295 300 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 300 430 (yank-handler (evil-yank-line-handler nil t) fontified t) 430 433 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 433 435 (yank-handler (evil-yank-line-handler nil t) fontified t) 435 436 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 436 438 (yank-handler (evil-yank-line-handler nil t) fontified t) 438 441 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 441 443 (yank-handler (evil-yank-line-handler nil t) fontified t) 443 445 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 445 557 (yank-handler (evil-yank-line-handler nil t) fontified t) 557 559 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 559 622 (yank-handler (evil-yank-line-handler nil t) fontified t) 622 627 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 627 681 (yank-handler (evil-yank-line-handler nil t) fontified t) 681 686 (yank-handler (evil-yank-line-handler nil t) face font-lock-keyword-face fontified t) 686 816 (yank-handler (evil-yank-line-handler nil t) fontified t) 816 818 (yank-handler (evil-yank-line-handler nil t) face font-lock-type-face fontified t) 818 933 (yank-handler (evil-yank-line-handler nil t) fontified t) 933 943 (yank-handler (evil-yank-line-handler nil t) fontified t) 943 997 (yank-handler (evil-yank-line-handler nil t) fontified t) 997 998 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 998 1048 (yank-handler (evil-yank-line-handler nil t) fontified t) 1048 1064 (yank-handler (evil-yank-line-handler nil t) fontified t) 1064 1241 (yank-handler (evil-yank-line-handler nil t) fontified t) 1241 1242 (yank-handler (evil-yank-line-handler nil t) face font-lock-variable-name-face fontified t) 1242 1351 (yank-handler (evil-yank-line-handler nil t) fontified t)))))
(setq file-name-history '("~/.emacs.d/desktop-saves/" "~/Documents/unige/spike-rs/tests/src/main.rs" "~/.emacs.d/desktop-saves/" "~/dotfiles/configurations/emacs/desktop-saves"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/leonardo/Documents/unige/spike-rs/implementations/native_c/src/lib.rs"
  "lib.rs"
  'rust-ts-mode
  '(font-lock-mode display-line-numbers-mode company-mode evil-local-mode)
  28130
  '(27301 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 26387 61043 629491 466000) (buffer-file-coding-system . undecided-unix) (overwrite-mode))
  '((mark-ring (27974 27986 26722 28332 28332 28332 28332 1 1))))

(desktop-create-buffer 208
  "/home/leonardo/Documents/unige/spike-rs/tests/src/main.rs"
  "main.rs"
  'rust-ts-mode
  '(font-lock-mode display-line-numbers-mode company-mode evil-local-mode)
  693
  '(693 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 26387 60887 196469 318000) (buffer-file-coding-system . undecided-unix) (overwrite-mode))
  '((mark-ring (693))))

(desktop-create-buffer 208
  "/home/leonardo/Documents/unige/spike-rs/implementations/spike-h5/src/lib.rs"
  "lib.rs"
  'rust-ts-mode
  '(font-lock-mode display-line-numbers-mode company-mode evil-local-mode)
  28355
  '(26295 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-display-time 26387 61043 629493 351000) (buffer-file-coding-system . utf-8-unix) (overwrite-mode))
  '((mark-ring (27727 24931))))

